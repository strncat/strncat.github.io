<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-15T20:27:52-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">nemo’s notebook</title><subtitle>personal study notes</subtitle><entry><title type="html">Project Euler</title><link href="http://localhost:4000/jekyll/update/2024/12/11/project-euler.html" rel="alternate" type="text/html" title="Project Euler" /><published>2024-12-11T08:01:36-08:00</published><updated>2024-12-11T08:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/11/project-euler</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/11/project-euler.html"><![CDATA[<ol>
	   <li>Multiples of 3 or 5</li> 
	   <li>Even Fibonacci Numbers</li>
	   <li>Largest Prime Factor</li>
	   <li>Largest Palindrome Product</li>	   
	   <li>Smallest Multiple</li>
	   <li>Sum Square Difference</li>
	   <li>10001st Prime</li>
	   <li>Largest Product in a Series</li>
	   <li>Special Pythagorean Triplet</li>
	   <li>Summation of Primes</li>
	   <li>Largest Product in a Grid</li>
	   <li>Highly Divisible Triangular Number</li>
	   <li>Large Sum</li>
	   <li>Longest Collatz Sequence</li>
	   <li>Lattice Paths</li>
	   <li>Power Digit Sum</li>
	   <li>Number Letter Counts</li>
	   <li>Maximum Path Sum I</li>
	   <li>Counting Sundays</li>
	   <li>Factorial Digit Sum</li>
	   <li>Amicable Numbers</li>	   
	   <li><a href="/jekyll/update/2024/12/10/project-euler-22-names-scores.html">
        Names Scores
       </a></li>
	   <li><a href="/jekyll/update/2024/12/01/project-euler-23-non-abundant-sums.html">
        Non-Abundant Sums
       </a></li>
	   <li><a href="/jekyll/update/2024/12/03/project-euler-24-lexicographic-permutations.html">
        Lexicographic Permutations
       </a></li>
   </ol>
<p><br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Multiples of 3 or 5 Even Fibonacci Numbers Largest Prime Factor Largest Palindrome Product Smallest Multiple Sum Square Difference 10001st Prime Largest Product in a Series Special Pythagorean Triplet Summation of Primes Largest Product in a Grid Highly Divisible Triangular Number Large Sum Longest Collatz Sequence Lattice Paths Power Digit Sum Number Letter Counts Maximum Path Sum I Counting Sundays Factorial Digit Sum Amicable Numbers Names Scores Non-Abundant Sums Lexicographic Permutations]]></summary></entry><entry><title type="html">Project Euler: 22 Names Scores</title><link href="http://localhost:4000/jekyll/update/2024/12/10/project-euler-22-names-scores.html" rel="alternate" type="text/html" title="Project Euler: 22 Names Scores" /><published>2024-12-10T00:01:36-08:00</published><updated>2024-12-10T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/10/project-euler-22-names-scores</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/10/project-euler-22-names-scores.html"><![CDATA[<p>This was pretty straightforward. The first thing that I wanted to do is to point my input stream at the file we’re given. So just the following line.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"> 
<span class="n">freopen</span><span class="p">(</span><span class="s">"0022_names.txt"</span> <span class="p">,</span> <span class="s">"r"</span> <span class="p">,</span> <span class="n">stdin</span><span class="p">);</span></code></pre></figure>

<p>The next thing we want is to read the chunk of names all at once so</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">str</span><span class="p">;</span></code></pre></figure>

<p>The chunk saved in str will look this</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="s">"MARY"</span><span class="p">,</span><span class="s">"PATRICIA"</span><span class="p">,</span><span class="s">"LINDA"</span><span class="p">,</span><span class="s">"BARBARA"</span><span class="p">,</span><span class="s">"ELIZABETH"</span><span class="p">,</span><span class="s">"JENNIFER"</span><span class="p">,</span><span class="s">"MARIA"</span><span class="p">,</span><span class="s">"SUSAN"</span><span class="p">,</span><span class="s">"MARGARET"</span><span class="p">,</span><span class="s">"DOROTHY"</span><span class="p">,</span>
<span class="s">"LISA"</span><span class="p">,</span><span class="s">"NANCY"</span><span class="p">,</span><span class="s">"KAREN"</span><span class="p">,</span><span class="s">"BETTY"</span><span class="p">,</span><span class="s">"HELEN"</span><span class="p">,</span><span class="s">"SANDRA"</span><span class="p">,</span><span class="s">"DONNA"</span><span class="p">,</span><span class="s">"CAROL"</span><span class="p">,</span><span class="s">"RUTH"</span><span class="p">,</span><span class="s">"SHARON"</span><span class="p">,</span><span class="s">"MICHELLE"</span><span class="p">,</span>
<span class="s">"LAURA"</span><span class="p">,</span><span class="s">"SARAH"</span><span class="p">,</span><span class="s">"KIMBERLY"</span><span class="p">,</span><span class="s">"DEBORAH"</span><span class="p">,</span><span class="s">"JESSICA"</span><span class="p">,</span><span class="s">"SHIRLEY"</span><span class="p">,</span><span class="s">"CYNTHIA"</span><span class="p">,</span><span class="s">"ANGELA"</span><span class="p">,</span><span class="s">"MELISSA"</span><span class="p">,</span><span class="s">"BRENDA"</span><span class="p">,</span><span class="s">"AMY"</span><span class="p">,</span>
<span class="s">"ANNA"</span><span class="p">,</span><span class="s">"REBECCA"</span><span class="p">,</span><span class="s">"VIRGINIA"</span><span class="p">,</span><span class="s">"KATHLEEN"</span><span class="p">,.....</span></code></pre></figure>

<p>Now we want to split them based on the delimiter “,” and we also want to take out the first and last character</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">names</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="nf">ss</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">token</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">delimiter</span> <span class="o">=</span> <span class="sc">','</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">getline</span><span class="p">(</span><span class="n">ss</span><span class="p">,</span> <span class="n">token</span><span class="p">,</span> <span class="n">delimiter</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">names</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">token</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">token</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<p>Next, we want to sort the list of names. We can just use std::sort. I’m assuming years ago, this was painful to do.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">names</span><span class="p">.</span><span class="n">end</span><span class="p">());</span></code></pre></figure>

<p>Finally, we want to calculate the score as follows. (Remember that “A-A=0”, so we can just subtract “A” to get the score we want for each letter in the name).</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">names</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">names</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">score</span> <span class="o">+=</span> <span class="n">names</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">-</span><span class="sc">'A'</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">score</span> <span class="o">*=</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">names</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">score</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">score</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"score sum = %lld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span></code></pre></figure>

<p><br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<p><a href="https://projecteuler.net/problem=22">Project Euler - 22</a>
<br />
<br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[This was pretty straightforward. The first thing that I wanted to do is to point my input stream at the file we’re given. So just the following line. freopen("0022_names.txt" , "r" , stdin);]]></summary></entry><entry><title type="html">Abstract Algebra</title><link href="http://localhost:4000/jekyll/update/2024/12/05/abstract-algebra.html" rel="alternate" type="text/html" title="Abstract Algebra" /><published>2024-12-05T08:01:36-08:00</published><updated>2024-12-05T08:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/05/abstract-algebra</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/05/abstract-algebra.html"><![CDATA[<!------------------------ [1] Algebraic Themes --------------------------->
<h4> [1] Algebraic Themes </h4>
<ol style="list-style-type:none;">
	   <li><a href="/jekyll/update/2024/11/01/1.6-z.html">
        [1.6] Z (1.6.1 - 1.6.2)
       </a></li>
	   <li><a href="/jekyll/update/2024/11/02/1.6-primes.html">
        [1.6] Prime Numbers (1.6.4 - 1.6.7)
       </a></li>
	   <li><a href="/jekyll/update/2024/11/04/1.6-gcd.html">
        [1.6] Greatest Common Divisor (1.6.8 - 1.6.13)
       </a></li>
	   <li><a href="/jekyll/update/2024/11/05/1.6-relatively-prime.html">
        [1.6] Relatively Prime Integers (1.6.14 - 1.6.21)
       </a></li>	   
	   <li><a href="/jekyll/update/2024/11/06/1.6-gcd-many.html">
        [1.6] Greatest Common Divisor of Many Integers (1.6.22 - 1.6.25)
       </a></li>
	   <li><a href="/jekyll/update/2024/11/07/1.7-modular-arthmetic.html">
        [1.7] Modular Arithmetic
       </a></li>
	   <li>
        [1.8] Polynomials
       </li>
	   <li>
		[1.9] Counting
	   </li>
	   <li><a href="/jekyll/update/2024/11/08/1.10-groups.html">
        [1.10] Groups
       </a></li>
	   <li>
		[1.9] Rings and Fields
	   </li>
   </ol>
<p><br />
<!------------------------ [2] Basic Theory of Groups ---------------------------></p>
<h4> [2] Basic Theory of Groups </h4>
<ol style="list-style-type:none;">
	   <li><a href="/jekyll/update/2024/11/09/2.1-first-results.html">
        [1.10] Groups
       </a></li>
   </ol>
<p><br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[[1] Algebraic Themes [1.6] Z (1.6.1 - 1.6.2) [1.6] Prime Numbers (1.6.4 - 1.6.7) [1.6] Greatest Common Divisor (1.6.8 - 1.6.13) [1.6] Relatively Prime Integers (1.6.14 - 1.6.21) [1.6] Greatest Common Divisor of Many Integers (1.6.22 - 1.6.25) [1.7] Modular Arithmetic [1.8] Polynomials [1.9] Counting [1.10] Groups [1.9] Rings and Fields [2] Basic Theory of Groups [1.10] Groups]]></summary></entry><entry><title type="html">Project Euler: 24 Lexicographic Permutations</title><link href="http://localhost:4000/jekyll/update/2024/12/03/project-euler-24-lexicographic-permutations.html" rel="alternate" type="text/html" title="Project Euler: 24 Lexicographic Permutations" /><published>2024-12-03T00:01:36-08:00</published><updated>2024-12-03T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/03/project-euler-24-lexicographic-permutations</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/03/project-euler-24-lexicographic-permutations.html"><![CDATA[<p>We want to generate the millionth lexicographic permutation of the digits 0,1,2,3,4,5,6,7,8 and 9. While this can be done easily with the standard library’s own next_permutation as follows</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"> <span class="kt">bool</span> <span class="nf">is_abundant</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">next_permutation</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">a</span><span class="p">.</span><span class="n">end</span><span class="p">()))</span> <span class="p">{</span>
		<span class="k">break</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<p><br />
I think the point of the exercise is to implement or understand how you generate the next permutation yourself. I wrote about this in <a href="https://strncat.github.io/jekyll/update/2024/12/02/next-permutation.html">here</a>.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<p><a href="https://projecteuler.net/problem=23">Project Euler - 23</a>
<br />
<br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[We want to generate the millionth lexicographic permutation of the digits 0,1,2,3,4,5,6,7,8 and 9. While this can be done easily with the standard library’s own next_permutation as follows bool is_abundant(int n) { for (int i = 1; i &lt; 1000000; i++) { if (!std::next_permutation(a.begin(), a.end())) { break; } }; I think the point of the exercise is to implement or understand how you generate the next permutation yourself. I wrote about this in here. References Project Euler - 23]]></summary></entry><entry><title type="html">Generating the Next Permutation Lexicographically</title><link href="http://localhost:4000/jekyll/update/2024/12/02/next-permutation.html" rel="alternate" type="text/html" title="Generating the Next Permutation Lexicographically" /><published>2024-12-02T06:01:36-08:00</published><updated>2024-12-02T06:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/02/next-permutation</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/02/next-permutation.html"><![CDATA[<p>Suppose we have the array \(a = [1,2,3,4]\) that represents a permutation and we would like to generate the next permutation lexicographically. How can we do this?
<br />
<br />
If we were to generate the next one manually, then we’d want the next smallest number. That it, if 1234 is the smallest number, we’d want the next possible increment which is 1243. Therefore, we’d swap 3 and 4 to get</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>For the next smallest number, we know it is 1324. We know we exhausted both 1234 and 1243 so it’s time to select a new number in place of 2 since. The next smallest number after 2 is 3. But since we’re starting fresh with this new placement, anything after 3 needs be in an ascending order and so we get</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>For the permutation following 1324, we will simply swap 4 and 2. So really as long the last pair is in an ascending order, then we can do a simple swap and be done.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>Notice now that after 3 everything is in a descending order. This means that it’s time to replace the digit 3 with the next number (4). But since this is a new placement, then everything after 4 needs to be in an ascending order. The permutation then will be</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span></code></pre></figure>

<p><br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Finding a Pattern</b></h4>
<p>So in a way, our first move is always finding the right most pair such that \(a_i &lt; a_{i+1}\). Given the last permutation we generated, \([1,4,2,3]\), \(a_i = 2\) and \(a_{i+1} = 3\). Since it’s literally the last pair in the permutation, then we’ll swap 2 and 3 and be done.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>However, now we see that \(a_i = 1\) and \(a_{i+1} = 4\). Swapping 1 and 4 isn’t enough since it will generate 4123. What we really want is to find the smallest number that is bigger than 1. In this case we want to find 2. Swapping 1 and 2 will generate 2431. The only thing left now is to reverse the segment starting at \(i+1\) to get</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>Looks like we potentially have an algorithm. Let’s try this again. In 2134, \(a_i = 3\) and \(a_{i+1} = 4\). Starting at \(i\), 4 is the smallest number bigger than 3. This is also the last pair so swap both and we’re done.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>Now we have \(a_i = 1\) and \(a_{i+1} = 4\). Starting at \(i\), the smallest number bigger than \(a_i=1\) is actually 3. So we swap 1 and 3 to get 2341. But since they were not consecutive, we will reverse the segment starting at \(i+1\) to get</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>For the next permutation, we can see that \(a_i = 1\) and \(a_{i+1} = 4\). It’s also the last pair, so we just need to swap 1 and 4 to get</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>Now we can see that \(a_i = 3\) and \(a_{i+1} = 4\). But searching for a smaller element larger than \(a_i\) isn’t possible as 4 is the best we can find. So we swap 3 and 4.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span></code></pre></figure>

<p><br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Putting Things Together</b></h4>
<p>The first step is simple. Find the most right pair such that \(a_{i} &lt; a_{i+1}\)</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// (1) Find the right most pair such that a_i &lt; a_i+1</span>
<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
		<span class="k">break</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="c1">// if i = -1, then we're at the last possible permutation</span></code></pre></figure>

<!------------------------------------------------------------------------------------>
<p>The next step is looking for the smallest element larger than \(a[i]\) starting the search at \(i+1\). But the trick here is that we know from the first pass that anything after the pair \(a_i, a_{i+1}\) must be in a descending order so we don’t to main an extra variable to hold the current minimum. We know that as we go to the end of the array, all the numbers are in a descending order. If they were not, we would’ve found them when we were searching for a pair such that \(a_i &lt; a_{i+1}\). So we can write</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// (2) Starting at i, we want to find the smallest number larger than a[i]</span>
<span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<!------------------------------------------------------------------------------------>
<p>The last step to just swap and reverse like we explained earlier</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// (3) Swap and reverse from i+1 to the end</span>
<span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">]);</span>
<span class="n">std</span><span class="o">::</span><span class="n">reverse</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="n">a</span><span class="p">.</span><span class="n">end</span><span class="p">());</span></code></pre></figure>

<p><br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Suppose we have the array \(a = [1,2,3,4]\) that represents a permutation and we would like to generate the next permutation lexicographically. How can we do this? If we were to generate the next one manually, then we’d want the next smallest number. That it, if 1234 is the smallest number, we’d want the next possible increment which is 1243. Therefore, we’d swap 3 and 4 to get [1,2,4,3] For the next smallest number, we know it is 1324. We know we exhausted both 1234 and 1243 so it’s time to select a new number in place of 2 since. The next smallest number after 2 is 3. But since we’re starting fresh with this new placement, anything after 3 needs be in an ascending order and so we get [1,3,2,4] For the permutation following 1324, we will simply swap 4 and 2. So really as long the last pair is in an ascending order, then we can do a simple swap and be done. [1,3,4,2] Notice now that after 3 everything is in a descending order. This means that it’s time to replace the digit 3 with the next number (4). But since this is a new placement, then everything after 4 needs to be in an ascending order. The permutation then will be [1,4,2,3] Finding a Pattern So in a way, our first move is always finding the right most pair such that \(a_i &lt; a_{i+1}\). Given the last permutation we generated, \([1,4,2,3]\), \(a_i = 2\) and \(a_{i+1} = 3\). Since it’s literally the last pair in the permutation, then we’ll swap 2 and 3 and be done. [1,4,3,2] However, now we see that \(a_i = 1\) and \(a_{i+1} = 4\). Swapping 1 and 4 isn’t enough since it will generate 4123. What we really want is to find the smallest number that is bigger than 1. In this case we want to find 2. Swapping 1 and 2 will generate 2431. The only thing left now is to reverse the segment starting at \(i+1\) to get [2,1,3,4] Looks like we potentially have an algorithm. Let’s try this again. In 2134, \(a_i = 3\) and \(a_{i+1} = 4\). Starting at \(i\), 4 is the smallest number bigger than 3. This is also the last pair so swap both and we’re done. [2,1,4,3] Now we have \(a_i = 1\) and \(a_{i+1} = 4\). Starting at \(i\), the smallest number bigger than \(a_i=1\) is actually 3. So we swap 1 and 3 to get 2341. But since they were not consecutive, we will reverse the segment starting at \(i+1\) to get [2,3,1,4] For the next permutation, we can see that \(a_i = 1\) and \(a_{i+1} = 4\). It’s also the last pair, so we just need to swap 1 and 4 to get [2,3,4,1] Now we can see that \(a_i = 3\) and \(a_{i+1} = 4\). But searching for a smaller element larger than \(a_i\) isn’t possible as 4 is the best we can find. So we swap 3 and 4. [2,4,3,1]]]></summary></entry><entry><title type="html">Project Euler: 23 Non-Abundant Sums</title><link href="http://localhost:4000/jekyll/update/2024/12/01/project-euler-23-non-abundant-sums.html" rel="alternate" type="text/html" title="Project Euler: 23 Non-Abundant Sums" /><published>2024-12-01T00:01:36-08:00</published><updated>2024-12-01T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/01/project-euler-23-non-abundant-sums</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/01/project-euler-23-non-abundant-sums.html"><![CDATA[<p>An abundant number \(n\) is a number for which the sum of its proper divisors is greater than \(n\).
<br />
<br />
We’re given that any number greater than 28123 can be expressed as a sum of two abundant numbers.
<br />
<br />
We want to find the sum of all numbers that can’t be expressed as a the sum of two abundant numbers. So we can limit ourselves to checking the numbers below the limit 28123.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Finding If a Number is Abundant</b></h4>
<p>We can find if a number is an abundant number by simply summing the proper divisors and seeing if the sum exceeds \(n\)</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"> <span class="kt">bool</span> <span class="nf">is_abundant</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//printf("n = %d\n", n);</span>
    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">divisors_sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// it's a divisor</span>
            <span class="n">divisors_sum</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// add the other divisor</span>
                <span class="n">divisors_sum</span> <span class="o">+=</span> <span class="n">n</span><span class="o">/</span><span class="n">i</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">divisors_sum</span> <span class="o">&gt;</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Finding If a Number is a Sum of Two Abundant Numbers</b></h4>
<p>The naive way to do this is by having two loops and checking all possible sums. A better way to do is given an integer \(n\) and an abundant number \(i\), we check if \(n - i\) is abundant. If \(n - i\) is abundant, then \(n\) can be a written as a sum of two abundant numbers.
<br />
<br />
To implement this, we then need two lists:</p>
<ul>
	<li> A list of all abundant numbers below 28123.</li>
	<li> An array of booleans to indicate whether a given number is abundant. We need this to check if \(n - i\) is abundant </li>
</ul>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">is_abundant</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">abundant</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="n">abundant_numbers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>We can now implement our idea below</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">28123</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Find if i can be expressed as a sum of two abundant numbers</span>
    <span class="kt">bool</span> <span class="n">abundant_sum</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">abundant_numbers</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">abundant_numbers</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">abundant</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">abundant_numbers</span><span class="p">[</span><span class="n">j</span><span class="p">]])</span> <span class="p">{</span>
            <span class="n">abundant_sum</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span> <span class="c1">// exist early, this number can be written as a sum of two abundant numbers</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">abundant_sum</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>I’m a fan of adding both of these segments to keep track of the time.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">clock_t</span> <span class="n">begin</span><span class="p">,</span> <span class="n">end</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">time_spent</span><span class="p">;</span>
<span class="n">begin</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
<span class="c1">// SOLUTION</span>
<span class="n">end</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
<span class="n">time_spent</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)(</span><span class="n">end</span> <span class="o">-</span> <span class="n">begin</span><span class="p">)</span> <span class="o">/</span> <span class="n">CLOCKS_PER_SEC</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"time spent = %f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">time_spent</span><span class="p">);</span></code></pre></figure>

<p>For this solution, the time spent was 0.032616 so well below 1 second.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<p><a href="https://projecteuler.net/problem=23">Project Euler - 23</a>
<br />
<br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[An abundant number \(n\) is a number for which the sum of its proper divisors is greater than \(n\). We’re given that any number greater than 28123 can be expressed as a sum of two abundant numbers. We want to find the sum of all numbers that can’t be expressed as a the sum of two abundant numbers. So we can limit ourselves to checking the numbers below the limit 28123. Finding If a Number is Abundant We can find if a number is an abundant number by simply summing the proper divisors and seeing if the sum exceeds \(n\) bool is_abundant(int n) { //printf("n = %d\n", n); int max = sqrt(n); int divisors_sum = 0; for (int i = 1; i &lt;= max; i++) { if (n % i == 0) { // it's a divisor divisors_sum += i; if (n / i != i &amp;&amp; i != 1) { // add the other divisor divisors_sum += n/i; } } } if (divisors_sum &gt; n) { return true; } return false; } Finding If a Number is a Sum of Two Abundant Numbers The naive way to do this is by having two loops and checking all possible sums. A better way to do is given an integer \(n\) and an abundant number \(i\), we check if \(n - i\) is abundant. If \(n - i\) is abundant, then \(n\) can be a written as a sum of two abundant numbers. To implement this, we then need two lists: A list of all abundant numbers below 28123. An array of booleans to indicate whether a given number is abundant. We need this to check if \(n - i\) is abundant for (int i = 1; i &lt;= N; i++) { if (is_abundant(i)) { abundant[i] = true; abundant_numbers.push_back(i); } } We can now implement our idea below int sum = 0; for (int i = 1; i &lt; 28123; i++) { // Find if i can be expressed as a sum of two abundant numbers bool abundant_sum = false; for (int j = 0; j &lt; abundant_numbers.size() &amp;&amp; abundant_numbers[j] &lt; i; j++) { if (abundant[i - abundant_numbers[j]]) { abundant_sum = true; break; // exist early, this number can be written as a sum of two abundant numbers } } if (!abundant_sum) { sum += i; } }]]></summary></entry><entry><title type="html">[2.1] Group Theory: First Results</title><link href="http://localhost:4000/jekyll/update/2024/11/09/2.1-first-results.html" rel="alternate" type="text/html" title="[2.1] Group Theory: First Results" /><published>2024-11-09T00:01:36-08:00</published><updated>2024-11-09T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/11/09/2.1-first-results</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/11/09/2.1-first-results.html"><![CDATA[<p>Going back to studying 
<!------------------------------------------------------------------------------></p>
<div class="peachheaderdiv">
Proposition 2.1.1 (Uniqueness of the identity)
</div>
<div class="peachbodydiv">
Let \(G\) be a group and suppose \(e\) and \(e'\) are both identity elements in \(G\); that is, for all \(g \in G\), \(eg = ge = e'g = ge' = g\). Then \(e = e'\).
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br />
<!------------------------------------------------------------------------------></p>
<div class="peachheaderdiv">
Proposition 2.1.2 (Uniqueness of inverses)
</div>
<div class="peachbodydiv">
Let \(G\) be a group and let \(h, g \in G\). If \(hg = e\), then \(h = g^{-1}\). Likewise, if \(gh = e\), then \(h = g^{-1}\).
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<!------------------------------------------------------------------------------>
<div class="peachheaderdiv">
Corollary 2.1.3
</div>
<div class="peachbodydiv">
Let \(g\) be an element of a group \(G\). We have \(g = (g^{-1})^{-1}\)
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<!------------------------------------------------------------------------------>
<div class="peachheaderdiv">
Proposition 2.1.4
</div>
<div class="peachbodydiv">
Let \(G\) be a group and let \(a,b \in G\). Then We have \((ab)^{-1} = b^{-1}a^{-1}\)
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<!------------------------------------------------------------------------------>
<div class="peachheaderdiv">
Proposition 2.1.5
</div>
<div class="peachbodydiv">
Let \(G\) be a group and \(a \in G\). The map \(L_a: G \rightarrow G\) defined by \(L_a(x) = ax\) is a bijection. Similarly, the map \(R_a: G \rightarrow G\) defined by \(R_a(x) = xa\) is a bijection.
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<!------------------------------------------------------------------------------>
<div class="peachheaderdiv">
Corollary 2.1.6
</div>
<div class="peachbodydiv">
Let \(G\) be a group and let \(a\) and \(b\) be elements of \(G\). The equation \(ax = b\) has a unique solution \(x\) in \(G\). and likewise the equation \(xa = b\) has a unique solution in \(G\).
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<!------------------------------------------------------------------------------>
<div class="peachheaderdiv">
Corollary 2.1.7 (Cancellation)
</div>
<div class="peachbodydiv">
Suppose \(a, x, y\) are elements of a group \(G\). If \(ax = ay\), then \(x = y\). Similarly, if \(xa = ya\), then \(x = y\).
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<!------------------------------------------------------------------------------>
<div class="peachheaderdiv">
Corollary 2.1.8
</div>
<div class="peachbodydiv">
If \(G\) is a finite group, each row and each column of the multiplication table of \(G\) contains each element of \(G\) exactly once.
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<!------------------------------------------------------------------------------>
<div class="mintheaderdiv">
Definition 2.1.10
</div>
<div class="mintbodydiv">
The order of a group is its size or cardinality. We will denote the order of a group \(G\) by \(|G|\).
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<!------------------------------------------------------------------------------>
<div class="mintheaderdiv">
Definition 2.1.13
</div>
<div class="mintbodydiv">
We say two groups \(G\) and \(H\) are isomorphic if there is a bijection \(\phi: G \rightarrow H\) such that for all \(g_1, g_2 \in G, \phi(g_1g_2) = \phi(g_1)\phi(g_2)\). The map \(\phi\) is called an isomorphism.
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<!------------------------------------------------------------------------------>
<div class="mintheaderdiv">
Definition 2.1.14
</div>
<div class="mintbodydiv">
A group \(G\) is called abelian (or commutative) if for all elements \(a, b \in G\), the products in the two orders are equal \(ab = ba\).
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<!------------------------------------------------------------------------------>
<div class="peachheaderdiv">
Proposition 2.1.17
</div>
<div class="peachbodydiv">
<ol type="a">
	<li>Up to isomorphism, \(\mathbf{Z_1}\) is the unique group of order 1.</li>
	<li>Up to isomorphism, \(\mathbf{Z_2}\) is the unique group of order 2.</li>
	<li>Up to isomorphism, \(\mathbf{Z_3}\) is the unique group of order 3.</li>
	<li>Up to isomorphism, there are exactly two groups of order 4, namely \(\mathbf{Z_4}\), and the group of rational symmetries of the rectangular card.</li>
	<li>Up to isomorphism, \(\mathbf{Z_5}\) is the unique group of order 5.</li>
	<li>All groups of order no more than 5 are abelian.</li>
	<li>There are at least two non-isomorphic groups of order 6, one abelian and one non-abelian.</li>
</ol>
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<!------------------------------------------------------------------------------>
<div class="peachheaderdiv">
Proposition 2.1.18
</div>
<div class="peachbodydiv">
If \(\phi : G \rightarrow H\) is an isomorphism, then \(\phi(e_G) = e_H\), and for each \(g \in G\), \(\phi(g^{-1}) = \phi(g)^{-1}\)
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<!------------------------------------------------------------------------------>
<div class="peachheaderdiv">
Proposition 2.1.19
</div>
<div class="peachbodydiv">
If \(\phi : G \rightarrow H\) is an isomorphism, then \(\phi(e_G) = e_H\), and for each \(g \in G\), \(\phi(g^{-1}) = \phi(g)^{-1}\)
</div>
<p><br />
<b>Proof</b>
<br /></p>

<p><br />
<br /></p>

<p><br />
<br /></p>
<hr />

<p><br />
<!------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<ul>
<li><a href="https://homepage.divms.uiowa.edu/~goodman/algebrabook.dir/algebrabook.html">Algebra: Abstract and Concrete by Frederick M. Goodman</a></li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Going back to studying Proposition 2.1.1 (Uniqueness of the identity) Let \(G\) be a group and suppose \(e\) and \(e'\) are both identity elements in \(G\); that is, for all \(g \in G\), \(eg = ge = e'g = ge' = g\). Then \(e = e'\). Proof]]></summary></entry><entry><title type="html">[1.10] Groups</title><link href="http://localhost:4000/jekyll/update/2024/11/08/1.10-groups.html" rel="alternate" type="text/html" title="[1.10] Groups" /><published>2024-11-08T00:01:36-08:00</published><updated>2024-11-08T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/11/08/1.10-groups</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/11/08/1.10-groups.html"><![CDATA[<p>An operation or product on a set \(G\) is a function from \(G \times G\) to \(G\). This set \(G\) with the operation is a group. More formally,
<!------------------------------------------------------------------------------></p>
<div class="mintheaderdiv">
Definition 1.10.1
</div>
<div class="mintbodydiv">
A group is a (nonempty) set \(G\) with a product satisfying the following properties:
<ol type="a">
	<li>The group is closed under the operation. </li>
	<li>The product is associative. For all \(a, b, c \in G\), we have (ab)c = a(bc).</li>
	<li>There is an identity element \(e \in G\) with property that for all \(a \in G\), \(ea = ae = a\).</li>
	<li>For each element \(a \in G\), there is an element \(a^{-1}\ \in G\) satisfying \(aa^{-1} = a^{-1}a = e\) (The inverse).</li>
</ol>
</div>
<p><br />
<!------------------------------------------------------------------------------>
So If we have a set of objects with an operation such that the rules above are satisfied and most importantly when you apply th then this set along with the operation is a group. What are some examples of groups?</p>
<ol type="a">
	<li>\(\mathbf{Z}\) with the addition operation.</li>
	<li>The set of invertible \(n \times n\) matrices with entries in \(\mathbf{R}\) with matrix multiplication as the product.</li>
	<li>For each element \(a \in G\), there is an element \(a^{-1}\ \in G\) satisfying \(aa^{-1} = a^{-1}a = e\).</li>
	<li>See more visual examples in this <a href="https://www.youtube.com/watch?v=g7L_r6zw4-c">video</a></li>
</ol>
<p><br />
<br /></p>
<hr />

<p><br />
<!------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<ul>
<li><a href="https://homepage.divms.uiowa.edu/~goodman/algebrabook.dir/algebrabook.html">Algebra: Abstract and Concrete by Frederick M. Goodman</a></li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[An operation or product on a set \(G\) is a function from \(G \times G\) to \(G\). This set \(G\) with the operation is a group. More formally, Definition 1.10.1 A group is a (nonempty) set \(G\) with a product satisfying the following properties: The group is closed under the operation. The product is associative. For all \(a, b, c \in G\), we have (ab)c = a(bc). There is an identity element \(e \in G\) with property that for all \(a \in G\), \(ea = ae = a\). For each element \(a \in G\), there is an element \(a^{-1}\ \in G\) satisfying \(aa^{-1} = a^{-1}a = e\) (The inverse). So If we have a set of objects with an operation such that the rules above are satisfied and most importantly when you apply th then this set along with the operation is a group. What are some examples of groups? \(\mathbf{Z}\) with the addition operation. The set of invertible \(n \times n\) matrices with entries in \(\mathbf{R}\) with matrix multiplication as the product. For each element \(a \in G\), there is an element \(a^{-1}\ \in G\) satisfying \(aa^{-1} = a^{-1}a = e\). See more visual examples in this video References Algebra: Abstract and Concrete by Frederick M. Goodman]]></summary></entry><entry><title type="html">[1.7] Modular Arithmetic</title><link href="http://localhost:4000/jekyll/update/2024/11/07/1.7-modular-arthmetic.html" rel="alternate" type="text/html" title="[1.7] Modular Arithmetic" /><published>2024-11-07T00:01:36-08:00</published><updated>2024-11-07T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/11/07/1.7-modular-arthmetic</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/11/07/1.7-modular-arthmetic.html"><![CDATA[<p>Suppose we have a natural number \(n\), then \((i \mod n)\) is the remainder after dividing \(n\) by \(i\). For example \((1 \mod 7) = (8 \mod 7) = (15 \mod 7) = 1\) and \((7 \mod 7) = 0\). From this we observe that for two numbers \(a\) and \(b\) to leave the same remainder, they need to be \(n\) numbers apart on the numbers line or in other words, \(|a - b|\) is a multiple of \(n\). Formally,
<!------------------------------------------------------------------------------></p>
<div class="mintheaderdiv">
Definition 1.7.1
</div>
<div class="mintbodydiv">
Given integers \(a\) and \(b\), and a natural number \(n\), we say that "\(a\) is congruent to \(b\) modulo \(n\)" and we write \(a \equiv b \mod n\) if \(a - b\) is divisible by \(n\).
</div>
<p><br />
This relation \(a \equiv b \mod n\) has the following properties:
<br />
<!------------------------------------------------------------------------------></p>
<div class="yellowheaderdiv">
Lemma 1.7.2
</div>
<div class="yellowbodydiv">
<ol type="a">
	<li>For all \(a \in \mathbf{Z}\), \(a \equiv a \mod n\).</li>
	<li>For all \(a, b \in \mathbf{Z}\), \(a \equiv b \mod n\) if and only if \(b \equiv a \mod n\).</li>
	<li>For all \(a, b, c \in \mathbf{Z}\), if \(a \equiv b \mod n\) and \(b \equiv c \mod n\), then \(a \equiv c \mod n\).</li>
</ol>
</div>
<p><br />
<!------------------------------------------------------------------------------>
<b>Proof</b>
<br />
For \((a)\), \(a - a = 0\) is divisible by \(n\). For \((b)\), if \(a - b\) is divisible by \(n\), then \(b - a\) is also divisible by \(n\) and vice versa. For \((c)\), if \(a - b\) is divisible by \(n\) and \(b - c\) is divisible by \(4n\), then \((a - b) + (b - c) = a - c\) is also divisible by \(n\). \(\ \blacksquare\)
<br />
<br />
<!------------------------------------------------------------------------------></p>
<div class="mintheaderdiv">
Definition
</div>
<div class="mintbodydiv">
For each integer \(a\), write
$$
\begin{align*}
[a] &amp;= \{b \in \mathbf{Z} \ | \ a \equiv b \mod n\} \\
    &amp;= \{ a + kn \ | \ k \in \mathbf{Z} \}
\end{align*}
$$
The set \(a\) is called the residue class or congruence class of \(a\) modulo \(n\). <br />
Also let \(rem_n(a)\) be the unique number \(r\) such that \(0 \leq r &lt; n\) and \(a - r\) is divisible by \(n\).  So it is the unique element of \([a]\) that lies in the interval \( \{0,1,...,n-1\} \).
</div>
<p><br />
<!------------------------------------------------------------------------------></p>
<div class="yellowheaderdiv">
Lemma 1.7.3
</div>
<div class="yellowbodydiv">
For \(a, b \in \mathbf{Z}\), the following are equivalent:
<ol type="a">
	<li>\(a \equiv b \mod n\).</li>
	<li>\([a] = [b]\).</li>
	<li>\(\text{rem}_n(a) = \text{rem}_n(b)\).</li>
	<li>\([a] \cap [b] \neq \emptyset\).</li>
</ol>
</div>
<p><br />
<!------------------------------------------------------------------------------>
<b>Proof</b>
<br />
\((a) \implies (b)\):
<br />
Suppose \(a \equiv b \mod n\). We want to show that \([a] = [b]\) by showing that \([a] \subseteq [b]\) and \([b] \subseteq [a]\). For any \(c \in \mathbf{Z}\), we know that if \(c \equiv a \mod n\), then \(c \equiv b \mod n\) by Lemma 1.7.2 (c). Therefore \([a] \subseteq [b]\). Similarly, if \(c \equiv b \mod n\), then \(c \equiv a \mod n\) and so \([a] = [b]\) as required.
<br />
<br />
\((b) \implies (c)\):
<br />
By definition, \(\text{rem}_n(x)\) is the unique element of \([x]\) that lies inside \(\{0,1,...,n-1\}\). So if \([a]=[b]\), then it must be the same element.
<br />
<br />
\((c) \implies (d)\):
<br />
\((d)\) is an immediate application of \((c)\)
<br />
<br />
\((d) \implies (a)\):
Suppose that \([a] \cap [b] \neq \emptyset\). Let \(c \in [a] \cap [b]\). Then \(a \equiv c \mod n\) and \(b \equiv c \mod n\). But this implies that \(a \equiv b \mod n\). \(\ \blacksquare\)
<br />
<br />
<!------------------------------------------------------------------------------></p>
<div class="yellowheaderdiv">
Corollary 1.7.4
</div>
<div class="yellowbodydiv">
There exist exactly \(n\) distinct residue classes modulo \(n\) namely \([0], [1],...,[n-1]\). These classes are mutually disjoint.
</div>
<p><br />
<br />
<!------------------------------------------------------------------------------></p>
<div class="yellowheaderdiv">
Lemma 1.7.5
</div>
<div class="yellowbodydiv">
Let \(a, a', b, b'\) be integers with \(a \equiv a' \mod n\) and \(b \equiv b' \mod n\). Then \(a + b \equiv a' + b' \mod n\) and \(ab \equiv a'b' \mod n\)
</div>
<p><br />
<!------------------------------------------------------------------------------>
<br />
<br /></p>
<hr />

<p><br />
<!------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<ul>
<li><a href="https://homepage.divms.uiowa.edu/~goodman/algebrabook.dir/algebrabook.html">Algebra: Abstract and Concrete by Frederick M. Goodman</a></li>
<li><a href="https://www.youtube.com/watch?v=8cikffEcyPI&amp;t=5s">Michael Penn's Lectures</a></li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Suppose we have a natural number \(n\), then \((i \mod n)\) is the remainder after dividing \(n\) by \(i\). For example \((1 \mod 7) = (8 \mod 7) = (15 \mod 7) = 1\) and \((7 \mod 7) = 0\). From this we observe that for two numbers \(a\) and \(b\) to leave the same remainder, they need to be \(n\) numbers apart on the numbers line or in other words, \(|a - b|\) is a multiple of \(n\). Formally, Definition 1.7.1 Given integers \(a\) and \(b\), and a natural number \(n\), we say that "\(a\) is congruent to \(b\) modulo \(n\)" and we write \(a \equiv b \mod n\) if \(a - b\) is divisible by \(n\). This relation \(a \equiv b \mod n\) has the following properties: Lemma 1.7.2 For all \(a \in \mathbf{Z}\), \(a \equiv a \mod n\). For all \(a, b \in \mathbf{Z}\), \(a \equiv b \mod n\) if and only if \(b \equiv a \mod n\). For all \(a, b, c \in \mathbf{Z}\), if \(a \equiv b \mod n\) and \(b \equiv c \mod n\), then \(a \equiv c \mod n\). Proof For \((a)\), \(a - a = 0\) is divisible by \(n\). For \((b)\), if \(a - b\) is divisible by \(n\), then \(b - a\) is also divisible by \(n\) and vice versa. For \((c)\), if \(a - b\) is divisible by \(n\) and \(b - c\) is divisible by \(4n\), then \((a - b) + (b - c) = a - c\) is also divisible by \(n\). \(\ \blacksquare\) Definition For each integer \(a\), write $$ \begin{align*} [a] &amp;= \{b \in \mathbf{Z} \ | \ a \equiv b \mod n\} \\ &amp;= \{ a + kn \ | \ k \in \mathbf{Z} \} \end{align*} $$ The set \(a\) is called the residue class or congruence class of \(a\) modulo \(n\). Also let \(rem_n(a)\) be the unique number \(r\) such that \(0 \leq r &lt; n\) and \(a - r\) is divisible by \(n\). So it is the unique element of \([a]\) that lies in the interval \( \{0,1,...,n-1\} \). Lemma 1.7.3 For \(a, b \in \mathbf{Z}\), the following are equivalent: \(a \equiv b \mod n\). \([a] = [b]\). \(\text{rem}_n(a) = \text{rem}_n(b)\). \([a] \cap [b] \neq \emptyset\). Proof \((a) \implies (b)\): Suppose \(a \equiv b \mod n\). We want to show that \([a] = [b]\) by showing that \([a] \subseteq [b]\) and \([b] \subseteq [a]\). For any \(c \in \mathbf{Z}\), we know that if \(c \equiv a \mod n\), then \(c \equiv b \mod n\) by Lemma 1.7.2 (c). Therefore \([a] \subseteq [b]\). Similarly, if \(c \equiv b \mod n\), then \(c \equiv a \mod n\) and so \([a] = [b]\) as required. \((b) \implies (c)\): By definition, \(\text{rem}_n(x)\) is the unique element of \([x]\) that lies inside \(\{0,1,...,n-1\}\). So if \([a]=[b]\), then it must be the same element. \((c) \implies (d)\): \((d)\) is an immediate application of \((c)\) \((d) \implies (a)\): Suppose that \([a] \cap [b] \neq \emptyset\). Let \(c \in [a] \cap [b]\). Then \(a \equiv c \mod n\) and \(b \equiv c \mod n\). But this implies that \(a \equiv b \mod n\). \(\ \blacksquare\) Corollary 1.7.4 There exist exactly \(n\) distinct residue classes modulo \(n\) namely \([0], [1],...,[n-1]\). These classes are mutually disjoint. Lemma 1.7.5 Let \(a, a', b, b'\) be integers with \(a \equiv a' \mod n\) and \(b \equiv b' \mod n\). Then \(a + b \equiv a' + b' \mod n\) and \(ab \equiv a'b' \mod n\) References Algebra: Abstract and Concrete by Frederick M. Goodman Michael Penn's Lectures]]></summary></entry><entry><title type="html">[1.6] Greatest Common Divisor of Many Integers (1.6.22 - 1.6.25)</title><link href="http://localhost:4000/jekyll/update/2024/11/06/1.6-gcd-many.html" rel="alternate" type="text/html" title="[1.6] Greatest Common Divisor of Many Integers (1.6.22 - 1.6.25)" /><published>2024-11-06T00:01:36-08:00</published><updated>2024-11-06T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/11/06/1.6-gcd-many</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/11/06/1.6-gcd-many.html"><![CDATA[<!------------------------------------------------------------------------------------>
<div class="mintheaderdiv">
Definition 1.6.22
</div>
<div class="mintbodydiv">
A natural number \(d\) is the greatest common divisor of nonzero integers \(a_1,a_2,...,a_n\) if
<ol type="a">
	<li>\(d\) divides each \(a_i\) and</li>
	<li>whenever \(x \in \mathbf{N}\) divides each \(a_i\), then \(x\) also divides \(d\)</li>
</ol>
</div>
<p><br />
<!------------------------------------------------------------------------------------></p>
<div class="yellowheaderdiv">
Lemma 1.6.23
</div>
<div class="yellowbodydiv">
Given nonzero integers \(a_1,...,a_n (n \geq 2)\), there is a natural number \(d\) and an \(n\)-by-\(n\) integer matrix \(Q\) such that \(Q\) is invertible, \(Q^{-1}\) also has integer entries, and
$$
\begin{align*}
(d,0,...,0) = (a_1,a_2,...,a_n)Q.
\end{align*}
$$
</div>
<p><br />
<!------------------------------------------------------------------------------------>
<b>Proof</b>
<br />
TODO
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<div class="peachheaderdiv">
Proposition 1.6.24
</div>
<div class="peachbodydiv">
The greatest common divisor of non-zero integers \(a_1,...,a_n\) exists, and is an integer linear combination of \(a_1, a_2,...,a_n\).
</div>
<p><br />
<!------------------------------------------------------------------------------------>
<b>Proof</b>
<br />
TODO
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<div class="mintheaderdiv">
Definition 1.6.25
</div>
<div class="mintbodydiv">
We say that non-zero integers \(a_1,...,a_n\) are relatively prime if their greatest common divisor is 1. 
We say that they are pairwise relatively prime if \(a_i\) and \(a_j\) are relatively prime whenever \(i \neq j\).
</div>
<p><br />
<br />
<!------------------------------------------------------------------------------------></p>
<div class="yellowheaderdiv">
Lemma 1.6.26
</div>
<div class="yellowbodydiv">
Let \(a_1,...,a_n\) be pairwise relatively prime integers, and let \(a = a_1,...,a_n\). If an integer \(z\) is divisible by each \(a_i\), then \(z\) is divisible by \(a\).
</div>
<!------------------------------------------------------------------------------------>
<p><br />
<b>Proof</b>
<br />
TODO
<br />
<br /></p>
<hr />

<p><br />
<!------------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<ul>
<li><a href="https://homepage.divms.uiowa.edu/~goodman/algebrabook.dir/algebrabook.html">Algebra: Abstract and Concrete by Frederick M. Goodman</a></li>
<li><a href="https://www.youtube.com/watch?v=8cikffEcyPI&amp;t=5s">Michael Penn's Lectures</a></li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Definition 1.6.22 A natural number \(d\) is the greatest common divisor of nonzero integers \(a_1,a_2,...,a_n\) if \(d\) divides each \(a_i\) and whenever \(x \in \mathbf{N}\) divides each \(a_i\), then \(x\) also divides \(d\) Lemma 1.6.23 Given nonzero integers \(a_1,...,a_n (n \geq 2)\), there is a natural number \(d\) and an \(n\)-by-\(n\) integer matrix \(Q\) such that \(Q\) is invertible, \(Q^{-1}\) also has integer entries, and $$ \begin{align*} (d,0,...,0) = (a_1,a_2,...,a_n)Q. \end{align*} $$ Proof TODO Proposition 1.6.24 The greatest common divisor of non-zero integers \(a_1,...,a_n\) exists, and is an integer linear combination of \(a_1, a_2,...,a_n\). Proof TODO Definition 1.6.25 We say that non-zero integers \(a_1,...,a_n\) are relatively prime if their greatest common divisor is 1. We say that they are pairwise relatively prime if \(a_i\) and \(a_j\) are relatively prime whenever \(i \neq j\). Lemma 1.6.26 Let \(a_1,...,a_n\) be pairwise relatively prime integers, and let \(a = a_1,...,a_n\). If an integer \(z\) is divisible by each \(a_i\), then \(z\) is divisible by \(a\). Proof TODO References Algebra: Abstract and Concrete by Frederick M. Goodman Michael Penn's Lectures]]></summary></entry></feed>