I"	<p>Strategy is a pattern that uses delegation. “In the Strategy pattern, an object delegates a specific request to an object that represents a strategy for carrying out the request. The purpose is “to change the behavior of an object by changing the objects to which it delegates requests.” 
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Motivation&lt;/h3&gt;
Suppose we want to output the shortest distance in a graph. We have several ways. Breadth First Search and Dijkstra are two ways. 
<br />
<br />
<!------------------------------------------------------------------------------------>
<h4><b>Example&lt;/h3&gt;
This is an extremely simple example to see how delegation might work. Suppose we have a view with a simple button. When the button is pressed, we move to another view. In the first view controller we have the following:

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">class</span> <span class="nc">ViewController</span><span class="o">:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">SubViewControllerDelegate</span> <span class="p">{</span>
    <span class="k">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
        <span class="n">let</span> <span class="n">button</span> <span class="o">=</span> <span class="n">UIButton</span><span class="p">(</span><span class="n">frame</span><span class="o">:</span> <span class="n">CGRect</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="n">width</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="n">height</span><span class="o">:</span> <span class="mi">50</span><span class="p">))</span>
        <span class="n">button</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">.</span><span class="n">green</span>
        <span class="n">button</span><span class="p">.</span><span class="n">setTitle</span><span class="p">(</span><span class="s">"Press"</span><span class="p">,</span> <span class="k">for</span><span class="o">:</span> <span class="p">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">button</span><span class="p">.</span><span class="n">addTarget</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">action</span><span class="o">:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">pressed</span><span class="p">),</span> <span class="k">for</span><span class="o">:</span> <span class="p">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">button</span><span class="p">)</span>
    <span class="p">}</span>
	<span class="err">@</span><span class="n">objc</span> <span class="n">func</span> <span class="nf">pressed</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// when the button is pressed, move to AnotherViewController</span>
        <span class="n">let</span> <span class="n">another</span> <span class="o">=</span> <span class="n">AnotherViewController</span><span class="p">()</span>
        <span class="n">another</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span> <span class="c1">// we are the delegate of another, another is the host object</span>
        <span class="n">self</span><span class="p">.</span><span class="n">present</span><span class="p">(</span><span class="n">sub</span><span class="p">,</span> <span class="n">animated</span><span class="o">:</span> <span class="nb">true</span><span class="p">,</span> <span class="n">completion</span><span class="o">:</span> <span class="n">nil</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

In the second view controller, we have another button. This time when we press the button, we want to let the first view controller know that it's been pressed. To do so, we create a weak delegate that lives in this view controller. We then inform the delegate of whatever message we'd like the first view controller to know about. In this example, we want to let the first view controller that the user had pressed our button. 



<br />
<!------------------------------------------------------------------------------------>
<h4><b>References&lt;/h3&gt;
- <a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612">Design Patterns</a>
- <a href="https://www.amazon.com/Cocoa-Design-Patterns-Erik-Buck/dp/0321535022">Cocoa Design Patterns (Book)</a>
- <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaDesignPatterns/CocoaDesignPatterns.html">Cocoa Design Patterns (Apple Docs)</a>
- <a href="https://www.raywenderlich.com/1941154-fundamental-ios-design-patterns/lessons/18">Fundamental iOS Design Patterns</a>
<br />
<br />















</b></h4></b></h4></b></h4>
:ET