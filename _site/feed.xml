<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-08T19:53:14-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">nemo’s notebook</title><subtitle>personal study notes</subtitle><entry><title type="html">Project Euler: 26 Reciprocal Cycles</title><link href="http://localhost:4000/jekyll/update/2025/01/02/project-euler-26-reciprocal-cycles.html" rel="alternate" type="text/html" title="Project Euler: 26 Reciprocal Cycles" /><published>2025-01-02T00:01:36-08:00</published><updated>2025-01-02T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2025/01/02/project-euler-26-reciprocal-cycles</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2025/01/02/project-euler-26-reciprocal-cycles.html"><![CDATA[<p>Before trying to find the longest cycle, we need to find a way to count the digits in the digital expansion of any number. Take \(\frac{1}{7} = 0.(142857)\) for instance. We want a way to iterate through the digits 1,4,2,8,5,7,… in \(\frac{1}{7}\). In other words, if you just want to iterate and just simply print the digits in the decimal expansion of \(\frac{1}{7}\), how do you do it? To simplify, let’s assume that we want to iterate over exactly 6 digits of the decimal expansion of \(\frac{1}{7}\). The easiest way to do this is to multiply 1 by \(10^6\) and divide to get</p>
<div>
	$$
	\begin{align*}
1,000,000 / 7 = 142,857.143
	\end{align*}
	$$
</div>
<p>Multiplying 1 by \(10^6\) all at once isn’t necessary here and we can’t do this anyway since what if the cycle is of length 300? We’re not going to multiply by \(10^{300}\) and dividing by 7. Instead, we can simulate this long division one step at a time, multiplying the remainder each time by 10 and dividing by 7. So the division will be broken into the following steps:</p>

<p>Step 1:
Multiply 1 by 10 and divide to get 10 / 7 = 1 with remainder 3.
<br />
Step 2:
Multiply 3 by 10 and divide to get 30 / 7 = 4 with remainder 2.
<br />
Step 3:
Multiply 2 by 10 and divide to get 20 / 7 = 2 with remainder 6.
<br />
Step 4:
Multiply 6 by 10 and divide to get 60 / 7 = 8 with remainder 4.
<br />
Step 5:
Multiply 4 by 10 and divide to get 40 / 7 = 5 with remainder 5.
<br />
Step 6:
Multiply 5 by 10 and divide to get 50 / 7 = 7 with remainder 1.
<br />
<br />
At this point, we have a reminder that we’ve seen before. We know what we’ll see exactly in step 7 and we know this will repeat for the next 5 steps. So we can stop here and declare that the cycle length is exactly 6.</p>

<p>We can simulate this simple long division for all the integers below 1000 to see what integer \(d\) has the longest cycle. We can easily do this with some hash table (unordered_map in c++ for example) to keep track of the remainders we’ve seen so far. Since we’re only checking for up to 1000, we can also put a limit on how many steps in long division we’re willing to do. Playing around with this, it doesn’t seem like any integers below 1000 will have a cycle longer than 1000 digits. So the following is enough to solve this problem</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="nf">long_division</span><span class="p">(</span><span class="kt">int</span> <span class="n">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">seen</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">numerator</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cycle_len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// let the maximum cycle length be 1000</span>
        <span class="kt">int</span> <span class="n">remainder</span> <span class="o">=</span> <span class="n">numerator</span> <span class="o">%</span> <span class="n">number</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">seen</span><span class="p">[</span><span class="n">remainder</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// cycle ends</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">seen</span><span class="p">[</span><span class="n">remainder</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">numerator</span> <span class="o">=</span> <span class="n">remainder</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
        <span class="n">cycle_len</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">cycle_len</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<p><a href="https://projecteuler.net/problem=25">Project Euler - 25</a>
<br />
<br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Before trying to find the longest cycle, we need to find a way to count the digits in the digital expansion of any number. Take \(\frac{1}{7} = 0.(142857)\) for instance. We want a way to iterate through the digits 1,4,2,8,5,7,… in \(\frac{1}{7}\). In other words, if you just want to iterate and just simply print the digits in the decimal expansion of \(\frac{1}{7}\), how do you do it? To simplify, let’s assume that we want to iterate over exactly 6 digits of the decimal expansion of \(\frac{1}{7}\). The easiest way to do this is to multiply 1 by \(10^6\) and divide to get $$ \begin{align*} 1,000,000 / 7 = 142,857.143 \end{align*} $$ Multiplying 1 by \(10^6\) all at once isn’t necessary here and we can’t do this anyway since what if the cycle is of length 300? We’re not going to multiply by \(10^{300}\) and dividing by 7. Instead, we can simulate this long division one step at a time, multiplying the remainder each time by 10 and dividing by 7. So the division will be broken into the following steps:]]></summary></entry><entry><title type="html">[2.5] Cosets and Lagrange’s Theorem</title><link href="http://localhost:4000/jekyll/update/2025/01/01/2.5-cosets-lagrange.html" rel="alternate" type="text/html" title="[2.5] Cosets and Lagrange’s Theorem" /><published>2025-01-01T00:01:36-08:00</published><updated>2025-01-01T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2025/01/01/2.5-cosets-lagrange</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2025/01/01/2.5-cosets-lagrange.html"><![CDATA[<div class="mintheaderdiv">
Definition 2.4.14
</div>
<div class="mintbodydiv">
Let \(H\) be subgroup of a group \(G\). A subset of the form
\(gH\), where \(g \in G\), is called a left coset of \(H\) in \(G\). A subset of the form
\(Hg\), where \(g \in G\), is called a right coset of \(H\) in \(G\).
</div>
<p><br />
<!------------------------------------------------------------------------></p>
<h4><b>Example 1</b></h4>
<p>Consider H = \(\{e , (1,2)\} \subseteq S_3\). We know \(S_3\) has six elements. Let \(\pi \in S_3\) and compute \(\pi H = \{ \pi \sigma \ : \ \sigma \in H \}\). So</p>
<div>
$$
\begin{align*}
S_3 = \{ e, \begin{pmatrix}1 &amp; 2 \end{pmatrix}, \begin{pmatrix}1 &amp; 3 \end{pmatrix}, \begin{pmatrix}2 &amp; 3 \end{pmatrix}, \begin{pmatrix}1 &amp; 2 &amp; 3 \end{pmatrix}, \begin{pmatrix}1 &amp; 3 &amp; 2 \end{pmatrix} 
\}
\end{align*}
$$
</div>
<p>For example \(\begin{pmatrix}1 &amp; 3 \end{pmatrix} H\) is</p>
<div>
$$
\begin{align*}
\begin{pmatrix}1 &amp; 3 \end{pmatrix} H &amp;= \{ \begin{pmatrix}1 &amp; 3 \end{pmatrix}e, \begin{pmatrix}1 &amp; 3 \end{pmatrix}  \begin{pmatrix}1 &amp; 2 \end{pmatrix} \} \\
&amp;= \{ \begin{pmatrix}1 &amp; 3 \end{pmatrix}, \begin{pmatrix} 1 &amp; 2 &amp; 3 \end{pmatrix} \}
\end{align*}
$$
</div>
<p>This is because if we let \(f = (1 \quad 3)\) and \(g = (1 \quad 2)\), then \(f \circ g\) results in \(f(g(1)) = f(2) = 2\). So 1 gets mapped to 2. Similarly \(f(g(2)) = f(1) = 3\). So 2 gets mapped to 3 and \(f(g(3)) = f(3) = 1\) so 3 gets mapped to 1. Writing this in cycle notation means \(1 \rightarrow 2, 2 \rightarrow 3, 3 \rightarrow 1\) or \((1 \quad 2 \quad 3)\).</p>
<div>
$$
\begin{align*}
eH &amp;= (1 \quad 2) H = H \\
\begin{pmatrix}1 &amp; 3 \end{pmatrix} H &amp;= (1 \quad 2 \quad 3)H = \{ \begin{pmatrix}1 &amp; 3 \end{pmatrix}, \begin{pmatrix}1 &amp; 2 &amp; 3 \end{pmatrix} \} \\
\begin{pmatrix}2 &amp; 3 \end{pmatrix} H &amp;= (1 \quad 3 \quad 2)H = \{ \begin{pmatrix}2 &amp; 3 \end{pmatrix}, \begin{pmatrix}1 &amp; 3 &amp; 2 \end{pmatrix} \} \\
\end{align*}
$$
</div>
<p><br /></p>
<hr />

<p><br />
<!------------------------------------------------------------------------></p>
<h4><b>Example 2</b></h4>
<p>Suppose \(G = (\mathbf{Z}_4, +)\) and $$H = {0, 2}. Then we have the following cosests</p>
<div>
$$
\begin{align*}
H+0 &amp;= \{0,2\} \\
H+1 &amp;= \{1,3\} \\
H+2 &amp;= \{2,0\} \\
H+3 &amp;= \{3,1\}
\end{align*}
$$
</div>
<p>We can see here that we have two distinct right cosets. Moreover, the cosets are disjoint and partition the group. Next, we’ll formalize these properties about cosets!
<br />
<br />
<!------------------------------------------------------------------------></p>
<div class="peachheaderdiv">
Proposition 2.5.3
</div>
<div class="peachbodydiv">
Let \(H\) be a subgroup of a group \(G\), and let \(a\) and \(b\) be
elements of \(G\). The following conditions are equivalent:
<ol type="a">
	<li>\(a \in bH\).</li>
	<li>\(b \in aH\).</li>
	<li>\(aH = bH\).</li>
	<li>\(b^{-1}a \in H\).</li>
	<li>\(a^{-1}b \in H\).</li>
</ol>
</div>
<!------------------------------------------------------------------------>
<p><br />
<b>Proof</b>
<br />
Suppose \((a)\) holds. Let \(a \in bH\). Then there exists some \(h \in H\) such that \(a = bh\). Since \(H\) is a subgroup, then we know \(h^{-1} \in H\). So we can write \(b = ah^{-1}\). But \(ah^{-1}\) is in \(aH\) by the definition of a left coset which is what we wanted to show. With similar reason \((b)\) also implies \((a)\). 
<br />
<br />
For \((c)\), we want to show that \(aH \subseteq bH\) and \(bH \subseteq aH\). To show that \(bH \subseteq aH\), we want to show that for any arbitrary element \(x\) in \(bH\), that \(x\) is also in \(aH\). So consider any \(x \in bH\). By the definition of a coset, we can write \(x = bh\) for some \(h \in H\). Now suppose that \((b)\) holds and so we have \(b \in aH\). This means that we can write \(b = ah_1\) for some \(h_1 \in H\). But this means that we can write \(x = bh = ah_1h\). The product \(h_1h\) is in \(H\) because \(H\) is a subgroup. Furthermore, \(ah_1h\) must be in \(aH\) by the definition of a coset. Therefore, \(x = bh \in aH\) and so \(bH \subseteq aH\) as we wanted to show. Since \((b)\) also implies \((a)\) we can use a similar reasoning to show that \(aH \subseteq bH\).
<br />
<br />
For \((d)\) ….
<br />
<br />
<!------------------------------------------------------------------------></p>
<div class="peachheaderdiv">
Proposition 2.5.4
</div>
<div class="peachbodydiv">
Let \(H\) be a subgroup of a group \(G\).
<ol type="a">
	<li>Let \(a\) and \(b\) be elements of \(G\). Either \(aH = bH\) or \(aH \cap bH = \emptyset\)</li>
	<li>Each left coset \(aH\) is nonempty and the union of left cosets is \(G\).</li>
</ol>
</div>
<!------------------------------------------------------------------------>
<p><br />
<b>Proof</b>
<br />
For \((a)\), Suppose \(aH \cap bH \neq \emptyset\) and let \(c \in aH \cap bH\). Since \(c \in aH\), then \(aH = cH\) by Proposition 2.5.3. Similarly since \(c \in bH\), then \(bH = cH\). Therefore, \(aH = bH\).
<br />
<br />
For \((b)\), \(aH\) is nonempty since \(H\) is a subgroup and can’t be empty. Furthermore, for each element \(g \in G\), \(g \in gH\). By \((a)\) then the union of all the left cosets must be \(G\).
<br />
<br />
<!------------------------------------------------------------------------></p>
<div class="peachheaderdiv">
Proposition 2.5.5
</div>
<div class="peachbodydiv">
Let \(H\) be a subgroup of a group \(G\) and let \(a\) and \(b\) be
elements of \(G\). Then \(x \longmapsto ba^{-1}\) is a bijection between \(aH\) and \(bH\).
</div>
<!------------------------------------------------------------------------>
<p><br />
<b>Proof</b>
Let \(f : aH \rightarrow bH\) where \(f(x) = ba^{-1}x\). We want to show that \(f\) is a bijection by showing that it’s one-to-one and onto. Suppose \(a_1, a_2 \in aH\) then we can write \(a_1 = ah_1\) and \(a_2 = ah_2\) for some \(h_1, h_2 \in H\). Moreover, suppose that \(f(a_1) = f(a_2)\). Observe that</p>
<div>
$$
\begin{align*}
ba^{-1}a_1 &amp;= ba^{-1}a_2 \\
b^{-1}ba^{-1}a_1 &amp;= b^{-1}ba^{-1}a_2 \quad \text{($G$ is a group so the inverse exists)} \\
aa^{-1}a_1 &amp;= aa^{-1}a_2 \\
a_1 &amp;= a_2 \\
\end{align*}
$$
</div>
<p>From this we see that \(f\) is one-to-one or injective. To see that it’s surjective, we need to show that for any element \(y \in bH\), that there exists an element \(x \in aH\) such that \(f(x) = y\). Since \(y \in bH\), then we can write \(y = bh\) for some \(h \in H\). Now, let \(x = ah \in aH\) and observe that</p>
<div>
$$
\begin{align*}
f(x) &amp;= ba^{-1}x \\
     &amp;= ba^{-1}(ah) \\
	 &amp;= b(a^{-1}ah) \\
	 &amp;= bh = y.
\end{align*}
$$
</div>
<p>\(ah\) is in \(aH\) by definition. Therefore \(f\) is surjective. From this we see that \(f\) is a bijection from \(aH\) to \(bH\). \(\ \blacksquare\)
<br />
<br />
<!------------------------------------------------------------------------></p>
<div class="yellowheaderdiv">
Theorem 2.5.6 (Lagrange's Theorem)
</div>
<div class="yellowbodydiv">
Let \(G\) be a finite group and \(H\) a subgroup. Then the cardinality of \(H\) divides the cardinality of \(G\), and the quotient \(\frac{|G|}{|H|}\) is the number of left cosets of \(H\) in \(G\).
</div>
<!------------------------------------------------------------------------>
<p><br />
<b>Proof</b></p>

<p><br />
<br />
<br /></p>
<hr />

<p><br />
<!------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<ul>
<li><a href="https://homepage.divms.uiowa.edu/~goodman/algebrabook.dir/algebrabook.html">Algebra: Abstract and Concrete by Frederick M. Goodman</a></li>
<li><a href="https://www.youtube.com/watch?v=kthl-MhIf4s&amp;list=PLztBpqftvzxVvdVmBMSM4PVeOsE5w1NnN&amp;index=22">Wrath of Math Youtube Channel</a></li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Definition 2.4.14 Let \(H\) be subgroup of a group \(G\). A subset of the form \(gH\), where \(g \in G\), is called a left coset of \(H\) in \(G\). A subset of the form \(Hg\), where \(g \in G\), is called a right coset of \(H\) in \(G\). Example 1 Consider H = \(\{e , (1,2)\} \subseteq S_3\). We know \(S_3\) has six elements. Let \(\pi \in S_3\) and compute \(\pi H = \{ \pi \sigma \ : \ \sigma \in H \}\). So $$ \begin{align*} S_3 = \{ e, \begin{pmatrix}1 &amp; 2 \end{pmatrix}, \begin{pmatrix}1 &amp; 3 \end{pmatrix}, \begin{pmatrix}2 &amp; 3 \end{pmatrix}, \begin{pmatrix}1 &amp; 2 &amp; 3 \end{pmatrix}, \begin{pmatrix}1 &amp; 3 &amp; 2 \end{pmatrix} \} \end{align*} $$ For example \(\begin{pmatrix}1 &amp; 3 \end{pmatrix} H\) is $$ \begin{align*} \begin{pmatrix}1 &amp; 3 \end{pmatrix} H &amp;= \{ \begin{pmatrix}1 &amp; 3 \end{pmatrix}e, \begin{pmatrix}1 &amp; 3 \end{pmatrix} \begin{pmatrix}1 &amp; 2 \end{pmatrix} \} \\ &amp;= \{ \begin{pmatrix}1 &amp; 3 \end{pmatrix}, \begin{pmatrix} 1 &amp; 2 &amp; 3 \end{pmatrix} \} \end{align*} $$ This is because if we let \(f = (1 \quad 3)\) and \(g = (1 \quad 2)\), then \(f \circ g\) results in \(f(g(1)) = f(2) = 2\). So 1 gets mapped to 2. Similarly \(f(g(2)) = f(1) = 3\). So 2 gets mapped to 3 and \(f(g(3)) = f(3) = 1\) so 3 gets mapped to 1. Writing this in cycle notation means \(1 \rightarrow 2, 2 \rightarrow 3, 3 \rightarrow 1\) or \((1 \quad 2 \quad 3)\). $$ \begin{align*} eH &amp;= (1 \quad 2) H = H \\ \begin{pmatrix}1 &amp; 3 \end{pmatrix} H &amp;= (1 \quad 2 \quad 3)H = \{ \begin{pmatrix}1 &amp; 3 \end{pmatrix}, \begin{pmatrix}1 &amp; 2 &amp; 3 \end{pmatrix} \} \\ \begin{pmatrix}2 &amp; 3 \end{pmatrix} H &amp;= (1 \quad 3 \quad 2)H = \{ \begin{pmatrix}2 &amp; 3 \end{pmatrix}, \begin{pmatrix}1 &amp; 3 &amp; 2 \end{pmatrix} \} \\ \end{align*} $$ Example 2 Suppose \(G = (\mathbf{Z}_4, +)\) and $$H = {0, 2}. Then we have the following cosests $$ \begin{align*} H+0 &amp;= \{0,2\} \\ H+1 &amp;= \{1,3\} \\ H+2 &amp;= \{2,0\} \\ H+3 &amp;= \{3,1\} \end{align*} $$ We can see here that we have two distinct right cosets. Moreover, the cosets are disjoint and partition the group. Next, we’ll formalize these properties about cosets! Proposition 2.5.3 Let \(H\) be a subgroup of a group \(G\), and let \(a\) and \(b\) be elements of \(G\). The following conditions are equivalent: \(a \in bH\). \(b \in aH\). \(aH = bH\). \(b^{-1}a \in H\). \(a^{-1}b \in H\). Proof Suppose \((a)\) holds. Let \(a \in bH\). Then there exists some \(h \in H\) such that \(a = bh\). Since \(H\) is a subgroup, then we know \(h^{-1} \in H\). So we can write \(b = ah^{-1}\). But \(ah^{-1}\) is in \(aH\) by the definition of a left coset which is what we wanted to show. With similar reason \((b)\) also implies \((a)\). For \((c)\), we want to show that \(aH \subseteq bH\) and \(bH \subseteq aH\). To show that \(bH \subseteq aH\), we want to show that for any arbitrary element \(x\) in \(bH\), that \(x\) is also in \(aH\). So consider any \(x \in bH\). By the definition of a coset, we can write \(x = bh\) for some \(h \in H\). Now suppose that \((b)\) holds and so we have \(b \in aH\). This means that we can write \(b = ah_1\) for some \(h_1 \in H\). But this means that we can write \(x = bh = ah_1h\). The product \(h_1h\) is in \(H\) because \(H\) is a subgroup. Furthermore, \(ah_1h\) must be in \(aH\) by the definition of a coset. Therefore, \(x = bh \in aH\) and so \(bH \subseteq aH\) as we wanted to show. Since \((b)\) also implies \((a)\) we can use a similar reasoning to show that \(aH \subseteq bH\). For \((d)\) …. Proposition 2.5.4 Let \(H\) be a subgroup of a group \(G\). Let \(a\) and \(b\) be elements of \(G\). Either \(aH = bH\) or \(aH \cap bH = \emptyset\) Each left coset \(aH\) is nonempty and the union of left cosets is \(G\). Proof For \((a)\), Suppose \(aH \cap bH \neq \emptyset\) and let \(c \in aH \cap bH\). Since \(c \in aH\), then \(aH = cH\) by Proposition 2.5.3. Similarly since \(c \in bH\), then \(bH = cH\). Therefore, \(aH = bH\). For \((b)\), \(aH\) is nonempty since \(H\) is a subgroup and can’t be empty. Furthermore, for each element \(g \in G\), \(g \in gH\). By \((a)\) then the union of all the left cosets must be \(G\). Proposition 2.5.5 Let \(H\) be a subgroup of a group \(G\) and let \(a\) and \(b\) be elements of \(G\). Then \(x \longmapsto ba^{-1}\) is a bijection between \(aH\) and \(bH\). Proof Let \(f : aH \rightarrow bH\) where \(f(x) = ba^{-1}x\). We want to show that \(f\) is a bijection by showing that it’s one-to-one and onto. Suppose \(a_1, a_2 \in aH\) then we can write \(a_1 = ah_1\) and \(a_2 = ah_2\) for some \(h_1, h_2 \in H\). Moreover, suppose that \(f(a_1) = f(a_2)\). Observe that $$ \begin{align*} ba^{-1}a_1 &amp;= ba^{-1}a_2 \\ b^{-1}ba^{-1}a_1 &amp;= b^{-1}ba^{-1}a_2 \quad \text{($G$ is a group so the inverse exists)} \\ aa^{-1}a_1 &amp;= aa^{-1}a_2 \\ a_1 &amp;= a_2 \\ \end{align*} $$ From this we see that \(f\) is one-to-one or injective. To see that it’s surjective, we need to show that for any element \(y \in bH\), that there exists an element \(x \in aH\) such that \(f(x) = y\). Since \(y \in bH\), then we can write \(y = bh\) for some \(h \in H\). Now, let \(x = ah \in aH\) and observe that $$ \begin{align*} f(x) &amp;= ba^{-1}x \\ &amp;= ba^{-1}(ah) \\ &amp;= b(a^{-1}ah) \\ &amp;= bh = y. \end{align*} $$ \(ah\) is in \(aH\) by definition. Therefore \(f\) is surjective. From this we see that \(f\) is a bijection from \(aH\) to \(bH\). \(\ \blacksquare\) Theorem 2.5.6 (Lagrange's Theorem) Let \(G\) be a finite group and \(H\) a subgroup. Then the cardinality of \(H\) divides the cardinality of \(G\), and the quotient \(\frac{|G|}{|H|}\) is the number of left cosets of \(H\) in \(G\). Proof]]></summary></entry><entry><title type="html">Project Euler: 25 1000-digit Fibonacci Number</title><link href="http://localhost:4000/jekyll/update/2024/12/14/project-euler-25-1000-digit-fibonacci-number.html" rel="alternate" type="text/html" title="Project Euler: 25 1000-digit Fibonacci Number" /><published>2024-12-14T00:01:36-08:00</published><updated>2024-12-14T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/14/project-euler-25-1000-digit-fibonacci-number</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/14/project-euler-25-1000-digit-fibonacci-number.html"><![CDATA[<p>This was also not so bad. At least the naive way to do this? I had a method that added two arrays together and returned the number of digits in the sum.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="nf">add_two_arrays</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">sum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">an</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bn</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// least significant digit is at index 0</span>
    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">an</span><span class="p">,</span> <span class="n">bn</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">carry</span><span class="p">;</span>
        <span class="n">sum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">total</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
        <span class="n">carry</span> <span class="o">=</span> <span class="n">total</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">sum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">carry</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">carry</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>I then used this array to sum the first two terms of fibonacci. The first two terms were saved in the arrays f1 and f2. The result will be saved in array sum. After we’re done, we copy f2 into f1 and then copy sum into f2 and repeat for another iteration until we reach the required the number of digits.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">f1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">f2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">an</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">bn</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">5000</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">add_two_arrays</span><span class="p">(</span><span class="n">f1</span><span class="p">,</span> <span class="n">f2</span><span class="p">,</span> <span class="n">sum</span><span class="p">,</span> <span class="n">an</span><span class="p">,</span> <span class="n">bn</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"we are done this is index = %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">k</span><span class="o">+</span><span class="mi">3</span><span class="p">);</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">f1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">f2</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
		<span class="n">f2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sum</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="p">}</span>
	<span class="n">an</span> <span class="o">=</span> <span class="n">bn</span><span class="p">;</span>
	<span class="n">bn</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>One small optimization I can think of is to avoid copying sum into f2 and f2 into f1 and instead use pointers to these arrays to just figure out which two arrays to sum.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<p><a href="https://projecteuler.net/problem=25">Project Euler - 25</a>
<br />
<br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[This was also not so bad. At least the naive way to do this? I had a method that added two arrays together and returned the number of digits in the sum. int add_two_arrays(int *a, int *b, int *sum, int an, int bn) { // least significant digit is at index 0 int max = std::max(an, bn); int i = 0; int carry = 0; for (; i &lt; max; i++) { int total = a[i] + b[i] + carry; sum[i] = total % 10; carry = total / 10; } sum[i] = carry; if (carry == 0) { return i; } return i+1; } I then used this array to sum the first two terms of fibonacci. The first two terms were saved in the arrays f1 and f2. The result will be saved in array sum. After we’re done, we copy f2 into f1 and then copy sum into f2 and repeat for another iteration until we reach the required the number of digits. f1[0] = 1; f2[0] = 1; int an = 1, bn = 1; for (int k = 0; k &lt; 5000; k++) { int n = add_two_arrays(f1, f2, sum, an, bn); if (n == 1000) { printf("we are done this is index = %d\n", k+3); return 0; } for (int i = 0; i &lt; n; i++) { f1[i] = f2[i]; f2[i] = sum[i]; } an = bn; bn = n; } One small optimization I can think of is to avoid copying sum into f2 and f2 into f1 and instead use pointers to these arrays to just figure out which two arrays to sum. References Project Euler - 25]]></summary></entry><entry><title type="html">Project Euler: 24 Lexicographic Permutations</title><link href="http://localhost:4000/jekyll/update/2024/12/13/project-euler-24-lexicographic-permutations.html" rel="alternate" type="text/html" title="Project Euler: 24 Lexicographic Permutations" /><published>2024-12-13T00:01:36-08:00</published><updated>2024-12-13T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/13/project-euler-24-lexicographic-permutations</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/13/project-euler-24-lexicographic-permutations.html"><![CDATA[<p>We want to generate the millionth lexicographic permutation of the digits 0,1,2,3,4,5,6,7,8 and 9. While this can be done easily with the standard library’s own next_permutation as follows</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">next_permutation</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">a</span><span class="p">.</span><span class="n">end</span><span class="p">()))</span> <span class="p">{</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><br />
I think the point of the exercise is to implement this on our own or come up with a much faster method. I was more interested in seeing how next permutation is implemented or the idea behind it. I wrote about it <a href="https://strncat.github.io/jekyll/update/2024/12/02/next-permutation.html">here</a> and used my own implementation to solve the problem. The next step is to come up with a faster algorithm to do this!
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<p><a href="https://projecteuler.net/problem=24">Project Euler - 24</a>
<br />
<br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[We want to generate the millionth lexicographic permutation of the digits 0,1,2,3,4,5,6,7,8 and 9. While this can be done easily with the standard library’s own next_permutation as follows for (int i = 1; i &lt; 1000000; i++) { if (!std::next_permutation(a.begin(), a.end())) { break; } } I think the point of the exercise is to implement this on our own or come up with a much faster method. I was more interested in seeing how next permutation is implemented or the idea behind it. I wrote about it here and used my own implementation to solve the problem. The next step is to come up with a faster algorithm to do this! References Project Euler - 24]]></summary></entry><entry><title type="html">Project Euler: 23 Non-Abundant Sums</title><link href="http://localhost:4000/jekyll/update/2024/12/12/project-euler-23-non-abundant-sums.html" rel="alternate" type="text/html" title="Project Euler: 23 Non-Abundant Sums" /><published>2024-12-12T00:01:36-08:00</published><updated>2024-12-12T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/12/project-euler-23-non-abundant-sums</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/12/project-euler-23-non-abundant-sums.html"><![CDATA[<p>An abundant number \(n\) is a number for which the sum of its proper divisors is greater than \(n\).
<br />
<br />
We’re given that any number greater than 28123 can be expressed as a sum of two abundant numbers.
<br />
<br />
We want to find the sum of all numbers that can’t be expressed as a the sum of two abundant numbers. So we can limit ourselves to checking the numbers below the limit 28123.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Finding If a Number is Abundant</b></h4>
<p>We can find if a number is an abundant number by simply summing the proper divisors and seeing if the sum exceeds \(n\)</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"> <span class="kt">bool</span> <span class="nf">is_abundant</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//printf("n = %d\n", n);</span>
    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">divisors_sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// it's a divisor</span>
            <span class="n">divisors_sum</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// add the other divisor</span>
                <span class="n">divisors_sum</span> <span class="o">+=</span> <span class="n">n</span><span class="o">/</span><span class="n">i</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">divisors_sum</span> <span class="o">&gt;</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Finding If a Number is a Sum of Two Abundant Numbers</b></h4>
<p>The naive way to do this is by having two loops and checking all possible sums. A better way to do is given an integer \(n\) and an abundant number \(i\), we check if \(n - i\) is abundant. If \(n - i\) is abundant, then \(n\) can be a written as a sum of two abundant numbers.
<br />
<br />
To implement this, we then need two lists:</p>
<ul>
	<li> A list of all abundant numbers below 28123.</li>
	<li> An array of booleans to indicate whether a given number is abundant. We need this to check if \(n - i\) is abundant </li>
</ul>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">is_abundant</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">abundant</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="n">abundant_numbers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>We can now implement our idea below</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">28123</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Find if i can be expressed as a sum of two abundant numbers</span>
    <span class="kt">bool</span> <span class="n">abundant_sum</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">abundant_numbers</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">abundant_numbers</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">abundant</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">abundant_numbers</span><span class="p">[</span><span class="n">j</span><span class="p">]])</span> <span class="p">{</span>
            <span class="n">abundant_sum</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span> <span class="c1">// exist early, this number can be written as a sum of two abundant numbers</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">abundant_sum</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>I’m a fan of adding both of these segments to keep track of the time.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">clock_t</span> <span class="n">begin</span><span class="p">,</span> <span class="n">end</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">time_spent</span><span class="p">;</span>
<span class="n">begin</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
<span class="c1">// SOLUTION</span>
<span class="n">end</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
<span class="n">time_spent</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)(</span><span class="n">end</span> <span class="o">-</span> <span class="n">begin</span><span class="p">)</span> <span class="o">/</span> <span class="n">CLOCKS_PER_SEC</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"time spent = %f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">time_spent</span><span class="p">);</span></code></pre></figure>

<p>For this solution, the time spent was 0.032616 so well below 1 second.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<p><a href="https://projecteuler.net/problem=23">Project Euler - 23</a>
<br />
<br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[An abundant number \(n\) is a number for which the sum of its proper divisors is greater than \(n\). We’re given that any number greater than 28123 can be expressed as a sum of two abundant numbers. We want to find the sum of all numbers that can’t be expressed as a the sum of two abundant numbers. So we can limit ourselves to checking the numbers below the limit 28123. Finding If a Number is Abundant We can find if a number is an abundant number by simply summing the proper divisors and seeing if the sum exceeds \(n\) bool is_abundant(int n) { //printf("n = %d\n", n); int max = sqrt(n); int divisors_sum = 0; for (int i = 1; i &lt;= max; i++) { if (n % i == 0) { // it's a divisor divisors_sum += i; if (n / i != i &amp;&amp; i != 1) { // add the other divisor divisors_sum += n/i; } } } if (divisors_sum &gt; n) { return true; } return false; } Finding If a Number is a Sum of Two Abundant Numbers The naive way to do this is by having two loops and checking all possible sums. A better way to do is given an integer \(n\) and an abundant number \(i\), we check if \(n - i\) is abundant. If \(n - i\) is abundant, then \(n\) can be a written as a sum of two abundant numbers. To implement this, we then need two lists: A list of all abundant numbers below 28123. An array of booleans to indicate whether a given number is abundant. We need this to check if \(n - i\) is abundant for (int i = 1; i &lt;= N; i++) { if (is_abundant(i)) { abundant[i] = true; abundant_numbers.push_back(i); } } We can now implement our idea below int sum = 0; for (int i = 1; i &lt; 28123; i++) { // Find if i can be expressed as a sum of two abundant numbers bool abundant_sum = false; for (int j = 0; j &lt; abundant_numbers.size() &amp;&amp; abundant_numbers[j] &lt; i; j++) { if (abundant[i - abundant_numbers[j]]) { abundant_sum = true; break; // exist early, this number can be written as a sum of two abundant numbers } } if (!abundant_sum) { sum += i; } }]]></summary></entry><entry><title type="html">Project Euler</title><link href="http://localhost:4000/jekyll/update/2024/12/11/project-euler.html" rel="alternate" type="text/html" title="Project Euler" /><published>2024-12-11T08:01:36-08:00</published><updated>2024-12-11T08:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/11/project-euler</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/11/project-euler.html"><![CDATA[<ol>
	   <li>Multiples of 3 or 5</li> 
	   <li>Even Fibonacci Numbers</li>
	   <li>Largest Prime Factor</li>
	   <li>Largest Palindrome Product</li>	   
	   <li>Smallest Multiple</li>
	   <li>Sum Square Difference</li>
	   <li>10001st Prime</li>
	   <li>Largest Product in a Series</li>
	   <li>Special Pythagorean Triplet</li>
	   <li>Summation of Primes</li>
	   <li>Largest Product in a Grid</li>
	   <li>Highly Divisible Triangular Number</li>
	   <li>Large Sum</li>
	   <li>Longest Collatz Sequence</li>
	   <li>Lattice Paths</li>
	   <li>Power Digit Sum</li>
	   <li>Number Letter Counts</li>
	   <li>Maximum Path Sum I</li>
	   <li>Counting Sundays</li>
	   <li>Factorial Digit Sum</li>
	   <li>Amicable Numbers</li>	   
	   <li><a href="/jekyll/update/2024/12/10/project-euler-22-names-scores.html">
        Names Scores
       </a></li>
	   <li><a href="/jekyll/update/2024/12/12/project-euler-23-non-abundant-sums.html">
        Non-Abundant Sums
       </a></li>
	   <li><a href="/jekyll/update/2024/12/13/project-euler-24-lexicographic-permutations.html">
        Lexicographic Permutations
       </a></li>
	   <li><a href="/jekyll/update/2024/12/14/project-euler-25-1000-digit-fibonacci-number.html">
        1000-digit Fibonacci Number
       </a></li>
	   <li><a href="/jekyll/update/2025/01/02/project-euler-26-reciprocal-cycles.html">
        Reciprocal Cycles
       </a></li>
   </ol>
<p><br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Multiples of 3 or 5 Even Fibonacci Numbers Largest Prime Factor Largest Palindrome Product Smallest Multiple Sum Square Difference 10001st Prime Largest Product in a Series Special Pythagorean Triplet Summation of Primes Largest Product in a Grid Highly Divisible Triangular Number Large Sum Longest Collatz Sequence Lattice Paths Power Digit Sum Number Letter Counts Maximum Path Sum I Counting Sundays Factorial Digit Sum Amicable Numbers Names Scores Non-Abundant Sums Lexicographic Permutations 1000-digit Fibonacci Number Reciprocal Cycles]]></summary></entry><entry><title type="html">Project Euler: 22 Names Scores</title><link href="http://localhost:4000/jekyll/update/2024/12/10/project-euler-22-names-scores.html" rel="alternate" type="text/html" title="Project Euler: 22 Names Scores" /><published>2024-12-10T00:01:36-08:00</published><updated>2024-12-10T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/10/project-euler-22-names-scores</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/10/project-euler-22-names-scores.html"><![CDATA[<p>This was pretty straightforward. The first thing that I wanted to do is to point my input stream at the file we’re given. So just the following line.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"> 
<span class="n">freopen</span><span class="p">(</span><span class="s">"0022_names.txt"</span> <span class="p">,</span> <span class="s">"r"</span> <span class="p">,</span> <span class="n">stdin</span><span class="p">);</span></code></pre></figure>

<p>The next thing we want is to read the chunk of names all at once so</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">str</span><span class="p">;</span></code></pre></figure>

<p>The chunk saved in str will look this</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="s">"MARY"</span><span class="p">,</span><span class="s">"PATRICIA"</span><span class="p">,</span><span class="s">"LINDA"</span><span class="p">,</span><span class="s">"BARBARA"</span><span class="p">,</span><span class="s">"ELIZABETH"</span><span class="p">,</span><span class="s">"JENNIFER"</span><span class="p">,</span><span class="s">"MARIA"</span><span class="p">,</span><span class="s">"SUSAN"</span><span class="p">,</span><span class="s">"MARGARET"</span><span class="p">,</span><span class="s">"DOROTHY"</span><span class="p">,</span>
<span class="s">"LISA"</span><span class="p">,</span><span class="s">"NANCY"</span><span class="p">,</span><span class="s">"KAREN"</span><span class="p">,</span><span class="s">"BETTY"</span><span class="p">,</span><span class="s">"HELEN"</span><span class="p">,</span><span class="s">"SANDRA"</span><span class="p">,</span><span class="s">"DONNA"</span><span class="p">,</span><span class="s">"CAROL"</span><span class="p">,</span><span class="s">"RUTH"</span><span class="p">,</span><span class="s">"SHARON"</span><span class="p">,</span><span class="s">"MICHELLE"</span><span class="p">,</span>
<span class="s">"LAURA"</span><span class="p">,</span><span class="s">"SARAH"</span><span class="p">,</span><span class="s">"KIMBERLY"</span><span class="p">,</span><span class="s">"DEBORAH"</span><span class="p">,</span><span class="s">"JESSICA"</span><span class="p">,</span><span class="s">"SHIRLEY"</span><span class="p">,</span><span class="s">"CYNTHIA"</span><span class="p">,</span><span class="s">"ANGELA"</span><span class="p">,</span><span class="s">"MELISSA"</span><span class="p">,</span><span class="s">"BRENDA"</span><span class="p">,</span><span class="s">"AMY"</span><span class="p">,</span>
<span class="s">"ANNA"</span><span class="p">,</span><span class="s">"REBECCA"</span><span class="p">,</span><span class="s">"VIRGINIA"</span><span class="p">,</span><span class="s">"KATHLEEN"</span><span class="p">,.....</span></code></pre></figure>

<p>Now we want to split them based on the delimiter “,” and we also want to take out the first and last character</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">names</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="nf">ss</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">token</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">delimiter</span> <span class="o">=</span> <span class="sc">','</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">getline</span><span class="p">(</span><span class="n">ss</span><span class="p">,</span> <span class="n">token</span><span class="p">,</span> <span class="n">delimiter</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">names</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">token</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">token</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<p>Next, we want to sort the list of names. We can just use std::sort. I’m assuming years ago, this was painful to do.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">names</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">names</span><span class="p">.</span><span class="n">end</span><span class="p">());</span></code></pre></figure>

<p>Finally, we want to calculate the score as follows. (Remember that “A-A=0”, so we can just subtract “A” to get the score we want for each letter in the name).</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">names</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">names</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">score</span> <span class="o">+=</span> <span class="n">names</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">-</span><span class="sc">'A'</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">score</span> <span class="o">*=</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">names</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">score</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">score</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"score sum = %lld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span></code></pre></figure>

<p><br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<p><a href="https://projecteuler.net/problem=22">Project Euler - 22</a>
<br />
<br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[This was pretty straightforward. The first thing that I wanted to do is to point my input stream at the file we’re given. So just the following line. freopen("0022_names.txt" , "r" , stdin);]]></summary></entry><entry><title type="html">Abstract Algebra</title><link href="http://localhost:4000/jekyll/update/2024/12/05/abstract-algebra.html" rel="alternate" type="text/html" title="Abstract Algebra" /><published>2024-12-05T08:01:36-08:00</published><updated>2024-12-05T08:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/05/abstract-algebra</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/05/abstract-algebra.html"><![CDATA[<!------------------------ [1] Algebraic Themes --------------------------->
<h4> [1] Algebraic Themes </h4>
<ol style="list-style-type:none;">
       <!--
	   <li><a href="/jekyll/update/2024/11/12/1.2-symmetries.html">
       [1.2] Symmetries
       </a></li>
	   -->
       <li><a href="/jekyll/update/2024/11/13/1.5-permutations.html">
       [1.5] Permutations (Representing Symmetries)
       </a></li>
	   <li><a href="/jekyll/update/2024/11/01/1.6-z.html">
        [1.6] Z (1.6.1 - 1.6.2)
       </a></li>
	   <li><a href="/jekyll/update/2024/11/02/1.6-primes.html">
        [1.6] Prime Numbers (1.6.4 - 1.6.7)
       </a></li>
	   <li><a href="/jekyll/update/2024/11/04/1.6-gcd.html">
        [1.6] Greatest Common Divisor (1.6.8 - 1.6.13)
       </a></li>
	   <li><a href="/jekyll/update/2024/11/05/1.6-relatively-prime.html">
        [1.6] Relatively Prime Integers (1.6.14 - 1.6.21)
       </a></li>	   
	   <li><a href="/jekyll/update/2024/11/06/1.6-gcd-many.html">
        [1.6] Greatest Common Divisor of Many Integers (1.6.22 - 1.6.25)
       </a></li>
	   <li><a href="/jekyll/update/2024/11/07/1.7-modular-arthmetic.html">
        [1.7] Modular Arithmetic
       </a></li>
   </ol>
<p><br />
<!------------------------ [2] Basic Theory of Groups ---------------------------></p>
<h4> [2] Basic Theory of Groups </h4>
<ol style="list-style-type:none;">
	   <li><a href="/jekyll/update/2024/11/09/2.1-first-results.html">
        [2.1] First Results
       </a></li>
	   <li><a href="/jekyll/update/2024/11/10/2.2-subgroups.html">
        [2.2] Subgroups and Cyclic Groups
       </a></li>
	   <li><a href="/jekyll/update/2024/11/11/2.4-homomorphisms-isomorphisms.html">
        [2.4] Homomorphisms and Isomorphisms
       </a></li>
	   <li><a href="/jekyll/update/2025/01/01/2.5-cosets-lagrange.html">
        [2.5] Cosets and Lagrange’s Theorem
       </a></li>
   </ol>
<p><br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[[1] Algebraic Themes [1.5] Permutations (Representing Symmetries) [1.6] Z (1.6.1 - 1.6.2) [1.6] Prime Numbers (1.6.4 - 1.6.7) [1.6] Greatest Common Divisor (1.6.8 - 1.6.13) [1.6] Relatively Prime Integers (1.6.14 - 1.6.21) [1.6] Greatest Common Divisor of Many Integers (1.6.22 - 1.6.25) [1.7] Modular Arithmetic [2] Basic Theory of Groups [2.1] First Results [2.2] Subgroups and Cyclic Groups [2.4] Homomorphisms and Isomorphisms [2.5] Cosets and Lagrange’s Theorem]]></summary></entry><entry><title type="html">Generating the Next Permutation Lexicographically</title><link href="http://localhost:4000/jekyll/update/2024/12/02/next-permutation.html" rel="alternate" type="text/html" title="Generating the Next Permutation Lexicographically" /><published>2024-12-02T06:01:36-08:00</published><updated>2024-12-02T06:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/12/02/next-permutation</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/12/02/next-permutation.html"><![CDATA[<p>Suppose we have the array \(a = [1,2,3,4]\) that represents a permutation and we would like to generate the next permutation lexicographically. How can we do this?
<br />
<br />
If we were to generate the next one manually, then we’d want the next smallest number. That it, if 1234 is the smallest number, we’d want the next possible increment which is 1243. Therefore, we’d swap 3 and 4 to get</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>For the next smallest number, we know it is 1324. We know we exhausted both 1234 and 1243 so it’s time to select a new number in place of 2 since. The next smallest number after 2 is 3. But since we’re starting fresh with this new placement, anything after 3 needs be in an ascending order and so we get</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>For the permutation following 1324, we will simply swap 4 and 2. So really as long the last pair is in an ascending order, then we can do a simple swap and be done.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>Notice now that after 3 everything is in a descending order. This means that it’s time to replace the digit 3 with the next number (4). But since this is a new placement, then everything after 4 needs to be in an ascending order. The permutation then will be</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span></code></pre></figure>

<p><br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Finding a Pattern</b></h4>
<p>So in a way, our first move is always finding the right most pair such that \(a_i &lt; a_{i+1}\). Given the last permutation we generated, \([1,4,2,3]\), \(a_i = 2\) and \(a_{i+1} = 3\). Since it’s literally the last pair in the permutation, then we’ll swap 2 and 3 and be done.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>However, now we see that \(a_i = 1\) and \(a_{i+1} = 4\). Swapping 1 and 4 isn’t enough since it will generate 4123. What we really want is to find the smallest number that is bigger than 1. In this case we want to find 2. Swapping 1 and 2 will generate 2431. The only thing left now is to reverse the segment starting at \(i+1\) to get</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>Looks like we potentially have an algorithm. Let’s try this again. In 2134, \(a_i = 3\) and \(a_{i+1} = 4\). Starting at \(i\), 4 is the smallest number bigger than 3. This is also the last pair so swap both and we’re done.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>Now we have \(a_i = 1\) and \(a_{i+1} = 4\). Starting at \(i\), the smallest number bigger than \(a_i=1\) is actually 3. So we swap 1 and 3 to get 2341. But since they were not consecutive, we will reverse the segment starting at \(i+1\) to get</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>For the next permutation, we can see that \(a_i = 1\) and \(a_{i+1} = 4\). It’s also the last pair, so we just need to swap 1 and 4 to get</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span></code></pre></figure>

<!----------------------------------------------------->
<p>Now we can see that \(a_i = 3\) and \(a_{i+1} = 4\). But searching for a smaller element larger than \(a_i\) isn’t possible as 4 is the best we can find. So we swap 3 and 4.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span></code></pre></figure>

<p><br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Putting Things Together</b></h4>
<p>The first step is simple. Find the most right pair such that \(a_{i} &lt; a_{i+1}\)</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// (1) Find the right most pair such that a_i &lt; a_i+1</span>
<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
		<span class="k">break</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="c1">// if i = -1, then we're at the last possible permutation</span></code></pre></figure>

<!------------------------------------------------------------------------------------>
<p>The next step is looking for the smallest element larger than \(a[i]\) starting the search at \(i+1\). But the trick here is that we know from the first pass that anything after the pair \(a_i, a_{i+1}\) must be in a descending order so we don’t to main an extra variable to hold the current minimum. We know that as we go to the end of the array, all the numbers are in a descending order. If they were not, we would’ve found them when we were searching for a pair such that \(a_i &lt; a_{i+1}\). So we can write</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// (2) Starting at i, we want to find the smallest number larger than a[i]</span>
<span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<!------------------------------------------------------------------------------------>
<p>The last step to just swap and reverse like we explained earlier</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// (3) Swap and reverse from i+1 to the end</span>
<span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">]);</span>
<span class="n">std</span><span class="o">::</span><span class="n">reverse</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="n">a</span><span class="p">.</span><span class="n">end</span><span class="p">());</span></code></pre></figure>

<p><br /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Suppose we have the array \(a = [1,2,3,4]\) that represents a permutation and we would like to generate the next permutation lexicographically. How can we do this? If we were to generate the next one manually, then we’d want the next smallest number. That it, if 1234 is the smallest number, we’d want the next possible increment which is 1243. Therefore, we’d swap 3 and 4 to get [1,2,4,3] For the next smallest number, we know it is 1324. We know we exhausted both 1234 and 1243 so it’s time to select a new number in place of 2 since. The next smallest number after 2 is 3. But since we’re starting fresh with this new placement, anything after 3 needs be in an ascending order and so we get [1,3,2,4] For the permutation following 1324, we will simply swap 4 and 2. So really as long the last pair is in an ascending order, then we can do a simple swap and be done. [1,3,4,2] Notice now that after 3 everything is in a descending order. This means that it’s time to replace the digit 3 with the next number (4). But since this is a new placement, then everything after 4 needs to be in an ascending order. The permutation then will be [1,4,2,3] Finding a Pattern So in a way, our first move is always finding the right most pair such that \(a_i &lt; a_{i+1}\). Given the last permutation we generated, \([1,4,2,3]\), \(a_i = 2\) and \(a_{i+1} = 3\). Since it’s literally the last pair in the permutation, then we’ll swap 2 and 3 and be done. [1,4,3,2] However, now we see that \(a_i = 1\) and \(a_{i+1} = 4\). Swapping 1 and 4 isn’t enough since it will generate 4123. What we really want is to find the smallest number that is bigger than 1. In this case we want to find 2. Swapping 1 and 2 will generate 2431. The only thing left now is to reverse the segment starting at \(i+1\) to get [2,1,3,4] Looks like we potentially have an algorithm. Let’s try this again. In 2134, \(a_i = 3\) and \(a_{i+1} = 4\). Starting at \(i\), 4 is the smallest number bigger than 3. This is also the last pair so swap both and we’re done. [2,1,4,3] Now we have \(a_i = 1\) and \(a_{i+1} = 4\). Starting at \(i\), the smallest number bigger than \(a_i=1\) is actually 3. So we swap 1 and 3 to get 2341. But since they were not consecutive, we will reverse the segment starting at \(i+1\) to get [2,3,1,4] For the next permutation, we can see that \(a_i = 1\) and \(a_{i+1} = 4\). It’s also the last pair, so we just need to swap 1 and 4 to get [2,3,4,1] Now we can see that \(a_i = 3\) and \(a_{i+1} = 4\). But searching for a smaller element larger than \(a_i\) isn’t possible as 4 is the best we can find. So we swap 3 and 4. [2,4,3,1]]]></summary></entry><entry><title type="html">[1.5] Permutations (Representing Symmetries)</title><link href="http://localhost:4000/jekyll/update/2024/11/13/1.5-permutations.html" rel="alternate" type="text/html" title="[1.5] Permutations (Representing Symmetries)" /><published>2024-11-13T00:01:36-08:00</published><updated>2024-11-13T00:01:36-08:00</updated><id>http://localhost:4000/jekyll/update/2024/11/13/1.5-permutations</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/11/13/1.5-permutations.html"><![CDATA[<p>What are the symmetries of the configuration of three objects above? There are 6 possible ways to place the objects. The symmetries of a configuration of identical objects are called <b>permutations</b>. 
<br />
<br />
To represent a permutation, we’ll use the following notation. The first row refers to the positions of these objects in the configuration. The second row represents the final configuration of the objects after permuting them.</p>
<div>
	$$
	\begin{align*}
	 \rho = \begin{pmatrix}1 &amp; 2 &amp; 3 \\ 3 &amp; 2 &amp; 1\end{pmatrix}
	\end{align*}
	$$
</div>
<p>So in the above, the objects in positions 1 and 3 will be switched while the object in position 2 will stay in place.</p>
<div>
	$$
	\begin{align*}
	 \rho = \begin{pmatrix}1 &amp; 2 &amp; 3 \\ 2 &amp; 3 &amp; 1\end{pmatrix}
	\end{align*}
	$$
</div>
<p>In the above, the object in position 1 will move to position 2. The object in position 2 will move to position 3 and the object in position 3 will move to position 1.
<br />
<br /></p>
<hr />

<p><br />
<!------------------------------------------------------------------------></p>
<h4><b>Permutations and Symmetries</b></h4>
<p>The set of permutations of \(n\) identical objects and the set of symmetries of a geometric figure share the following properties</p>
<ul>
	<li>The multiplication of permutations is associative.</li>
	<li>There is an identity element.</li>
	<li>For each permutation \(\sigma\), there is an inverse permutation \(\sigma^{-1}\).</li>
</ul>
<p>We know that maps from a set to itself can be composed and the composition is associative. Furthermore, if \(f\) and \(g\) are bijective, then \(f \circ g\) is also bijective. Now, consider the maps from a set \(X\) to itself. Let \(\text{Sym}(X)\) be the set of all bijective maps from the set \(X\) to itself. This set satisfies</p>
<ul>
	<li>composition of these maps is associative.</li>
	<li>There is an identity map \(id_X\) such that the composition of this map with any \(f \in \text{Sym}(X)\).</li>
	<li>The inverse of any map \(f \in \text{Sym}(X)\) is \(f^{-1}\) and the composition of these two maps is \(id_X\).</li>
</ul>
<p>We can see now that a permutation of \(n\) objects can really be represented with a bijective function on the set \(\{1,...,n\}\). The multiplication of permutations is really the same as the composition of these bijective maps. Instead of writing \(\text{Sym}(X)\), we write \(S_n\) where \(n\) is the number of elements in the set.
<br />
<br /></p>
<hr />

<p><br />
<!------------------------------------------------------------------------></p>
<h4><b>Cycle Notation</b></h4>
<p>Additionally, instead of writing the whole two rows like we did earlier, we typically write these permutations or maps in an alternative form. Instead of writing</p>
<div>
	$$
	\begin{align*}
	 \rho = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 \\ 4 &amp; 3 &amp; 1 &amp; 2 &amp; 6 &amp; 5 &amp; 7\end{pmatrix}
	\end{align*}
	$$
</div>
<p>we write</p>
<div>
	$$
	\begin{align*}
	 \rho = \begin{pmatrix}1 &amp; 4 &amp; 2 &amp; 3\end{pmatrix}\begin{pmatrix}5 &amp; 6\end{pmatrix}
	\end{align*}
	$$
</div>
<p>This form takes 1 to 4, 4 to 2, 2 to 3 and 3 to 1. It also takes 5 to 6 and 6 to 5. A permutation that permutes several numbers cyclically is called a <b>cycle</b>. And two cycles are disjoint if each will leave the numbers moved by the other cycle fixed. An example is the above permutation which has two disjoint cycles. With this representation though, all of the following permutations are equal</p>
<div>
	$$
	\begin{align*}
	 \begin{pmatrix}1 &amp; 4 &amp; 2 &amp; 3\end{pmatrix} = \begin{pmatrix}4 &amp; 2 &amp; 3 &amp; 1\end{pmatrix} = \begin{pmatrix}2 &amp; 3 &amp; 1 &amp; 4\end{pmatrix} = \begin{pmatrix}3 &amp; 1 &amp; 4 &amp; 2\end{pmatrix}
	\end{align*}
	$$
</div>
<p><br /></p>
<hr />

<p><br />
<!------------------------------------------------------------------------></p>
<h4><b>Multiplication with Cycle Notation</b></h4>
<p>Suppose we want to compose or multiply the following permutations</p>
<div>
	$$
	\begin{align*}
	 f = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\ 3 &amp; 5 &amp; 4 &amp; 1 &amp; 2 \end{pmatrix}
	\end{align*}
	$$
</div>
<p>and</p>
<div>
	$$
	\begin{align*}
	 g = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\ 3 &amp; 1 &amp; 5 &amp; 2 &amp; 4 \end{pmatrix}
	\end{align*}
	$$
</div>
<p>With the non-cycle notation, we can easily see that \(g(1) = 3\) and \(f(3) = 4\) so this means that 1 gets mapped to 4. Similarly, \(g(2) = 1\) and \(f(1) = 3\) so 2 gets mapped to 3. Furthermore, \(f(g(3)) = f(5) = 2\). \(f(g(4)) = f(2) = 5\). So we see that</p>
<div>
	$$
	\begin{align*}
	 f \circ g = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\ 4 &amp; 3 &amp; 2 &amp; 5 &amp; 1 \end{pmatrix}
	\end{align*}
	$$
</div>
<p>In cycle notation, we know that we can write \(f\) and \(g\) as follows</p>
<div>
	$$
	\begin{align*}
	 f &amp;= \begin{pmatrix} 1 &amp; 3 &amp; 4 \end{pmatrix} \begin{pmatrix} 2 &amp; 5 \end{pmatrix} \\
	 g &amp;= \begin{pmatrix} 1 &amp; 3 &amp; 5 &amp; 4 &amp; 2 \end{pmatrix}
	\end{align*}
	$$
</div>
<p>Suppose we want compose \(f\) and \(g\) in cycle notation. We’ll take one element at a time and see where it goes so</p>
<ul>
	<li>From \(g\) above we see that 1 goes to 3 and from \(f\), we see that 3 goes to 4. Therefore, \(f(g(1)) = 4\)</li>
	<li>Similarly using the cycle notation we see that 2 goes to 1 above with \(g\) and \(f\) takes 1 to 3. Therefore, \(f(g(2)) = 3\)</li>
	<li>Following the same pattern, \(f(g(3))=f(4)=2\). \(f(g(4)) = f(2) = 5\) and finally, \(f(g(5)) = f(4) = 1\)</li>
</ul>
<p>Writing the result in cycle notation, we can start with any element to start building a cycle. If we start with 1, then we see that 1 gets mapped to 4. 4 gets mapped to 5. 5 gets mapped to 1. So that’s a cycle. For the second cycle, if we start with 2, then 2 gets mapped 3 and then 3 gets mapped to 2. So that’s the second cycle or a transposition. Therefore we can write the following</p>
<div>
	$$
	\begin{align*}
	 f \circ g = \begin{pmatrix}1 &amp; 4 &amp; 5\end{pmatrix}\begin{pmatrix}2 &amp; 3\end{pmatrix}
	\end{align*}
	$$
</div>
<p><br />
<br /></p>
<hr />

<p><br />
<!------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<ul>
<li><a href="https://homepage.divms.uiowa.edu/~goodman/algebrabook.dir/algebrabook.html">Algebra: Abstract and Concrete by Frederick M. Goodman</a></li>
<li><a href="https://www.youtube.com/watch?v=MpKG6FmcIHk">Socratica</a></li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[What are the symmetries of the configuration of three objects above? There are 6 possible ways to place the objects. The symmetries of a configuration of identical objects are called permutations. To represent a permutation, we’ll use the following notation. The first row refers to the positions of these objects in the configuration. The second row represents the final configuration of the objects after permuting them. $$ \begin{align*} \rho = \begin{pmatrix}1 &amp; 2 &amp; 3 \\ 3 &amp; 2 &amp; 1\end{pmatrix} \end{align*} $$ So in the above, the objects in positions 1 and 3 will be switched while the object in position 2 will stay in place. $$ \begin{align*} \rho = \begin{pmatrix}1 &amp; 2 &amp; 3 \\ 2 &amp; 3 &amp; 1\end{pmatrix} \end{align*} $$ In the above, the object in position 1 will move to position 2. The object in position 2 will move to position 3 and the object in position 3 will move to position 1. Permutations and Symmetries The set of permutations of \(n\) identical objects and the set of symmetries of a geometric figure share the following properties The multiplication of permutations is associative. There is an identity element. For each permutation \(\sigma\), there is an inverse permutation \(\sigma^{-1}\). We know that maps from a set to itself can be composed and the composition is associative. Furthermore, if \(f\) and \(g\) are bijective, then \(f \circ g\) is also bijective. Now, consider the maps from a set \(X\) to itself. Let \(\text{Sym}(X)\) be the set of all bijective maps from the set \(X\) to itself. This set satisfies composition of these maps is associative. There is an identity map \(id_X\) such that the composition of this map with any \(f \in \text{Sym}(X)\). The inverse of any map \(f \in \text{Sym}(X)\) is \(f^{-1}\) and the composition of these two maps is \(id_X\). We can see now that a permutation of \(n\) objects can really be represented with a bijective function on the set \(\{1,...,n\}\). The multiplication of permutations is really the same as the composition of these bijective maps. Instead of writing \(\text{Sym}(X)\), we write \(S_n\) where \(n\) is the number of elements in the set. Cycle Notation Additionally, instead of writing the whole two rows like we did earlier, we typically write these permutations or maps in an alternative form. Instead of writing $$ \begin{align*} \rho = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 \\ 4 &amp; 3 &amp; 1 &amp; 2 &amp; 6 &amp; 5 &amp; 7\end{pmatrix} \end{align*} $$ we write $$ \begin{align*} \rho = \begin{pmatrix}1 &amp; 4 &amp; 2 &amp; 3\end{pmatrix}\begin{pmatrix}5 &amp; 6\end{pmatrix} \end{align*} $$ This form takes 1 to 4, 4 to 2, 2 to 3 and 3 to 1. It also takes 5 to 6 and 6 to 5. A permutation that permutes several numbers cyclically is called a cycle. And two cycles are disjoint if each will leave the numbers moved by the other cycle fixed. An example is the above permutation which has two disjoint cycles. With this representation though, all of the following permutations are equal $$ \begin{align*} \begin{pmatrix}1 &amp; 4 &amp; 2 &amp; 3\end{pmatrix} = \begin{pmatrix}4 &amp; 2 &amp; 3 &amp; 1\end{pmatrix} = \begin{pmatrix}2 &amp; 3 &amp; 1 &amp; 4\end{pmatrix} = \begin{pmatrix}3 &amp; 1 &amp; 4 &amp; 2\end{pmatrix} \end{align*} $$ Multiplication with Cycle Notation Suppose we want to compose or multiply the following permutations $$ \begin{align*} f = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\ 3 &amp; 5 &amp; 4 &amp; 1 &amp; 2 \end{pmatrix} \end{align*} $$ and $$ \begin{align*} g = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\ 3 &amp; 1 &amp; 5 &amp; 2 &amp; 4 \end{pmatrix} \end{align*} $$ With the non-cycle notation, we can easily see that \(g(1) = 3\) and \(f(3) = 4\) so this means that 1 gets mapped to 4. Similarly, \(g(2) = 1\) and \(f(1) = 3\) so 2 gets mapped to 3. Furthermore, \(f(g(3)) = f(5) = 2\). \(f(g(4)) = f(2) = 5\). So we see that $$ \begin{align*} f \circ g = \begin{pmatrix}1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\ 4 &amp; 3 &amp; 2 &amp; 5 &amp; 1 \end{pmatrix} \end{align*} $$ In cycle notation, we know that we can write \(f\) and \(g\) as follows $$ \begin{align*} f &amp;= \begin{pmatrix} 1 &amp; 3 &amp; 4 \end{pmatrix} \begin{pmatrix} 2 &amp; 5 \end{pmatrix} \\ g &amp;= \begin{pmatrix} 1 &amp; 3 &amp; 5 &amp; 4 &amp; 2 \end{pmatrix} \end{align*} $$ Suppose we want compose \(f\) and \(g\) in cycle notation. We’ll take one element at a time and see where it goes so From \(g\) above we see that 1 goes to 3 and from \(f\), we see that 3 goes to 4. Therefore, \(f(g(1)) = 4\) Similarly using the cycle notation we see that 2 goes to 1 above with \(g\) and \(f\) takes 1 to 3. Therefore, \(f(g(2)) = 3\) Following the same pattern, \(f(g(3))=f(4)=2\). \(f(g(4)) = f(2) = 5\) and finally, \(f(g(5)) = f(4) = 1\) Writing the result in cycle notation, we can start with any element to start building a cycle. If we start with 1, then we see that 1 gets mapped to 4. 4 gets mapped to 5. 5 gets mapped to 1. So that’s a cycle. For the second cycle, if we start with 2, then 2 gets mapped 3 and then 3 gets mapped to 2. So that’s the second cycle or a transposition. Therefore we can write the following $$ \begin{align*} f \circ g = \begin{pmatrix}1 &amp; 4 &amp; 5\end{pmatrix}\begin{pmatrix}2 &amp; 3\end{pmatrix} \end{align*} $$ References Algebra: Abstract and Concrete by Frederick M. Goodman Socratica]]></summary></entry></feed>