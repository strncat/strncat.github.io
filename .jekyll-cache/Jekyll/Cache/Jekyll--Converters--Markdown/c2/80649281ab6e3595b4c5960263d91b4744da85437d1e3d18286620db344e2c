I"*<p>The goal of this problem is finding the last 10 digits of the series</p>
<div>
	$$
	\begin{align*}
	 1^1 + 2^2 + 3^3 + \cdots + 1000^{1000}
	\end{align*}
	$$
</div>
<!------------------------------------------------------------------------------------>
<h4><b>Solution&lt;/h3&gt;
The key to this problem is using modular exponentiation. Since we only want to compute the last 10 digits of this sum, then this problem reduces to
<div>
	$$
	\begin{align*}
	 (1^1 + 2^2 + 3^3 + \cdots + 1000^{1000}) \mod 10^{10}
	\end{align*}
	$$
</div>
This expression simplifies to
<div>
	$$
	\begin{align*}
	 (1^1 \mod 10^{10}) + (2^2 \mod 10^{10}) + (3^3 \mod 10^{10}) + \cdots + (1000^{1000} \mod 10^{10})
	\end{align*}
	$$
</div>
We'll demonstrate how to calculate each one of these with an example
<br />
<br />
<!------------------------------------------------------------------------------------>
<h4><b>Example&lt;/h3&gt;
Suppose we want to calculate the last two digits of $$4^7$$. If we do this all at once by raising 4 to the power of 7 then, $$4^7 = 16384$$ and the last two digits are 84. To do this with modular exponentiation, we'll multiply the base each iteration with 4 and we'll do exactly 7 iterations to get the final result. The base starts at 1 in the first iteration.
<div>
	$$
	\begin{align*}
	(1) \times 4 \mod 100 &amp;= 4 \\
	(4) \times 4 \mod 100 &amp;= 16 \\
	(16) \times 4 \mod 100 &amp;= 64 \\	
	(64) \times 4 \mod 100 &amp;= 56 \\	
	(56) \times 4 \mod 100 &amp;= 24 \\	
	(24) \times 4 \mod 100 &amp;= 96 \\	
	(96) \times 4 \mod 100 &amp;= 84 \\	
	\end{align*}
	$$
</div>
We can see that we've arrived at the same exact answer. This process is called modular exponentiation. We do it when the powers are extremely large.
<br />
<br />
Using the above method we can then find the solution with just
<!------------------------------------------------------------------------------------>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">long</span> <span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="n">mod_value</span> <span class="o">=</span> <span class="mi">10000000000</span><span class="p">;</span> <span class="c1">// we want 10 digits</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">exponent</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">exponent</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">;</span> <span class="n">exponent</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">exponent</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">base</span> <span class="o">=</span> <span class="p">(</span><span class="n">base</span> <span class="o">*</span> <span class="n">exponent</span><span class="p">)</span> <span class="o">%</span> <span class="n">mod_value</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"(%d)^(%d) mod 10^10 = %lld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">exponent</span><span class="p">,</span> <span class="n">exponent</span><span class="p">,</span> <span class="n">base</span><span class="p">);</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">base</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"%lld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">sum</span> <span class="o">%</span> <span class="n">mod_value</span><span class="p">);</span></code></pre></figure>

<br />
<br />
<br />
<!------------------------------------------------------------------------------------>
<h4><b>References&lt;/h3&gt;
<a href="https://projecteuler.net/problem=48">Project Euler - 48</a>
<br />
<br />


</b></h4></b></h4></b></h4>
:ET