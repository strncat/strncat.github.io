I"/2<!------------------------------------------------------------------------------------>
<h4><b>Convexity</b></h4>
<p style="text-align:center;"><img src="http://localhost:4000/assets/geometry/convex-hull/conv-0.png" width="100%" class="center" /></p>
<p>A set of points $S$ is convex if for any two points $a \in S$ and $b \in S$, then the line segment connecting these two points is also in $S$ ($\overline{ab} \subseteq S$). A convex polygon is a polygon that is the boundary of a convex set. The left figure is a convex polygon while the right figure is not per our definition.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Convex Hull</b></h4>
<p style="text-align:center;"><img src="http://localhost:4000/assets/geometry/convex-hull/conv-1.png" width="70%" class="center" /></p>
<p>The convex hull of a set $S={p_1,p_2,…,p_n}$ is the set that contains all the combinations of the points in the $S$,</p>
<div>
$$
\begin{align*}
conv(S) = \{ \sum_{i=1}^{n} \lambda_i p_i | \sum_{i=1}^{n} \lambda_i = 1 \text{ and } \lambda_i \geq 0 \text{ for all $i$} \}
\end{align*}
$$
</div>
<p>We can also define the convex hull of $S$ to be the smallest convex set that contains all the points in $S$ which also implies the definition that the convex hull of $S$ is the intersection of all convex sets containing $S$.</p>
<div>
$$
\begin{align*}
conv(S) = \text{ Intersection of all convex sets containing $S$ }
\end{align*}
$$
</div>
<p>In the figure above for example, the yellow, green and pink sets are all convex sets that contain $S$ but the smallest one is the pink one which is also the intersection of all three. Why does this definition matter? there are infinitely many convex sets that will contain all the points in $S$. It turns out that this definition also works for a special kind of convex sets, called half-planes.</p>
<div>
$$
\begin{align*}
conv(S) = \text{ Intersection of all "half planes" containing $S$ }
\end{align*}
$$
</div>
<p>This result is helpful in (TODO: revisit this part of the lecture)
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Finding the Convex Hull</b></h4>
<p>Finding the convex hull is a classic computatioal geometry problem and many algorithms have been developed to solve it. Next, we discuss one of the simplest algorithms that is used to find the convex hull of a set of points.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Jarvis's March (Gift Wrapping Algorithm)</b></h4>
<p>Jarvis’s March is similar to Selection Sort. In each iteration of Selection Sort, we pick the smallest element in the array and then move it to the front. Once we’re done, we’ll have a sorted array. In Jarvis’s algorithm, the smallest element in each iteration is the right most vertex relative to the last vertex that was added to the convex hull. We start from some initial vertex in the convex hull and each iteration, we add a new vertex. Once we’re done, we’ll have the convex hull of our polygon.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>1. Preconditions</b></h4>
<p style="text-align:center;"><img src="http://localhost:4000/assets/geometry/convex-hull/step-1.png" width="60%" class="center" /></p>
<p>Initially, we will pick the a vertex that we know will be in the hull. We can pick the left most vertex or the bottom most vertex or any vertex where all the points will be on one side (half plane). Let’s pick the left most vertex and let it be $p_0$. 
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>2. Picking the Right Most Vertex</b></h4>
<p style="text-align:center;"><img src="http://localhost:4000/assets/geometry/convex-hull/step-2.png" width="70%" class="center" /></p>
<p>So now that we have a point in the convex hull, we need to proceed by picking the right most vertex relative to $p_0$. How do we determine the right most vertex? Imagine shooting a ray from $p_0$ to each of the remaining vertices. Before iterating over these vertices, we’ll start by labeling the first vertex from this set as “right_most” because it’s the right most one relative to $p_0$ for now. We will continue iterating through remaining vertices while updating “right_most” whenever we come across a vertex more to the right relative to $p_0$.</p>
<p style="text-align:center;"><img src="http://localhost:4000/assets/geometry/convex-hull/step-2a.png" width="85%" class="center" /></p>
<p>In each iteration, we will have the vertex $p_0$ on the hull, the current “right most” vertex so far and the vertex we’re testing right now $i$. The immediate approach we might think of is just to simply compare the angels right? comparing floating points is a pain. There is actually a much better way that we’ve previously discovered and used when triagulating a polygon. (See Orientation of Three Points). Precisely, we’ve derived an expression to find out whether a point $r$ is on the left or right of the line that goes through two given points $p$ and $q$. We can wrap this expression in the function below.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// determines if r is on the left of the line pq</span>
<span class="kt">int</span> <span class="nf">direction</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">product</span> <span class="o">=</span> <span class="p">(</span><span class="n">q_x</span><span class="o">-</span><span class="n">p_x</span><span class="p">)(</span><span class="n">r_y</span><span class="o">-</span><span class="n">p_y</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">r_x</span><span class="o">-</span><span class="n">p_x</span><span class="p">)(</span><span class="n">q_y</span><span class="o">-</span><span class="n">p_y</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// anti-clockwise</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">product</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c1">// clockwise</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// collinear</span>
<span class="p">}</span></code></pre></figure>

<p>We can then call this function to test if vertex $i$ above is located on the right or left of the line that goes through the segment $\overline{p_0, “right most”}$ below.</p>
<p style="text-align:center;"><img src="http://localhost:4000/assets/geometry/convex-hull/step-2b.png" width="85%" class="center" /></p>
<p>We can see above that $i$ is indeed more to the right of the line and hence more to the right relative to $p_0$. So this means that our “most right” vertex is now $i$ and in the next iteration, we will compare the next vertex from the remaining vertices below.</p>
<p style="text-align:center;"><img src="http://localhost:4000/assets/geometry/convex-hull/step-2c.png" width="75%" class="center" /></p>
<p><br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>3. Termination</b></h4>
<p style="text-align:center;"><img src="http://localhost:4000/assets/geometry/convex-hull/step-3.png" width="65%" class="center" /></p>
<p>We then continue picking the right most vertex relative to the last vertex that was added to the convex hull. In the previous section, we used the orientation test to pick the right most vertex relative to $p_0$. Once we’re done, we move to another iteration of the algorithm to find the most right vertex relative to $p_1$ (figure above). 
<br />
<br />
But when do we terminate? We terminate when our next right most vertex happens to be our starting point $p_0$. Once we get to this point, then we terminate and return the convex hull points.</p>
<p style="text-align:center;"><img src="http://localhost:4000/assets/geometry/convex-hull/step-4.png" width="65%" class="center" /></p>
<p><br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Implementation Details (Optional)</b></h4>
<p style="text-align:center;"><img src="http://localhost:4000/assets/geometry/convex-hull/step-2b.png" width="80%" class="center" /></p>
<p>We will maintain two variables. One tracks the current “best” or “right most” vetex. We’ll call it $candidate$ (green shaded vertex above) and a variable, $i$, to track the vertex we’re currently testing. For each vertex $i$ (orange lines below), we will call $direction(p_0, candidate, i)$. This answers the question of whether vertex $i$ on the left or right of the line that goes through $\overline{p_0, candidate}$. If the test returns -1, then know that $i$ is better than the current candidate vertex and so we set the candidate to be $i$ and increate $i$ to move to the next vertex.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">while</span> <span class="p">(</span><span class="n">hull_candidate</span> <span class="o">!=</span> <span class="n">first_convex_hull_point</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// step 1: the next candidate the next point</span>
    <span class="n">hull_candidate</span> <span class="o">=</span> <span class="p">(</span><span class="n">hull_point</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">points</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
    <span class="c1">// step 2: run the previous loop to find a better hull_candidate if any</span>
	<span class="k">for</span> <span class="n">i</span> <span class="n">in</span> <span class="n">the</span> <span class="n">remaining</span> <span class="n">vertices</span> <span class="p">(</span><span class="n">not</span> <span class="n">in</span> <span class="n">the</span> <span class="n">hull</span> <span class="n">yet</span><span class="p">)</span><span class="o">:</span>
	    <span class="k">if</span> <span class="p">(</span><span class="n">orientation</span><span class="p">(</span><span class="n">points</span><span class="p">[</span><span class="n">hull_point</span><span class="p">],</span> 
                        <span class="n">points</span><span class="p">[</span><span class="n">hull_candidate</span><span class="p">],</span> <span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	        <span class="n">hull_candidate</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
	    <span class="p">}</span>
	<span class="p">}</span>
    <span class="c1">// step 3: add candidate to the convex hull</span>
    <span class="n">convex_hull</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">hull_candidate</span><span class="p">)</span>
    <span class="n">hull_point</span> <span class="o">=</span> <span class="n">hull_candidate</span><span class="p">;</span> <span class="c1">// it's the current hull point for the next iteration</span></code></pre></figure>

<p>Source Code <a href="?">TODO</a>
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Running Time</b></h4>
<p>How fast is Jarvis’s March? The inner loop goes over $O(n)$ vertices. The outerloop really depends on the size of the convex hull. If we have $h$ points in the hull, then the running time is $O(h)$. Therefore, the overall running time is $O(hn)$.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>References</b></h4>
<p><a href="https://jeffe.cs.illinois.edu/teaching/compgeom/schedule.html">CS 498: Computational Geometry</a>
<br />
<br /></p>
:ET