I"h<p><img src="http://localhost:4000/assets/geometry/any-segment-intersection/intro.png" width="100%" />
We’ve looked at how to check if <a href="https://strncat.github.io/jekyll/update/2020/04/08/line-segment-intersection.html">two segments intersect</a> in just $O(1)$ time. Now, suppose we have a set of line segments and we want to know if any two segments in this set intersect. How can we do that?
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Sweep Line</b></h4>
<p><img src="http://localhost:4000/assets/geometry/any-segment-intersection/sweep-line.png" width="100%" />
Sweep Line  is a common technique used often in computational geometry where we imagine a vertical line going through the set of objects we’re interested in. The sweep line sweeps through one dimension that we chooses. This dimension is treated as a dimension of time. For example, in the figure above, the x-axis is our time line. The vertical line sweeps through the line segments to check whether any two segments intersect. 
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Basics</b></h4>
<p>First, we’ll assume that no three points intersect at a single point and that we don’t have vertical line segments. Second, instead of talking about line segments, we’ll just talk about the individual points that make up these segments. We’ll label the start point of a segment with “s” and the end point of a segment with “e”. If we have $n$ segments, we will have $2n$ points. Finally, we’ll sort these points by their x-coordinate. In case of ties, we’ll place the “start” points before the “end” points. If we still have ties, we’ll put the points with the lower y-coordinate first. Our dimension of time here is the x-coordinate and we will sweep from left to right.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Big Idea</b></h4>
<p><img src="http://localhost:4000/assets/geometry/any-segment-intersection/big-idea.png" width="100%" />
Naively, we would spend $O(n^2)$ time to check if any pair intersects by literally checking all possible intersections. CLRS presents a very smart algorithm that is based on one big idea. 
<br />
<br />
Sort the segment points and sweep through the points from left to right, stopping to evaluate the sweep line at every segment point. Suppose we know that a pair of segments intersect. The big idea is that we are guaranteed to have the two line segments be <b>consecutive at some sweep line</b>. In the figure above, the line segments intersect at $p$ and they are consecutive at the sweep line $x$. This is a huge idea! why? Because now we can just sweep through the points from left to right. When we evaluate a point, we only need to check the segment right below it or the segment right above it for a possible intersection! This means that the running time is dominated by the sort which runs in $O(n\log(n))$. 
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Proof</b></h4>
<p>If we have two segments $a$ and $b$ intersecting at some point $p$. Why must the segments be consecutive at some sweep line? 
<br />
<br />
Suppose we are at some sweep line $x$, let $T$ be the set of segments intersecting $x$. Let $\succeq_x$ be a relation on $T$. We say $a \succeq_x b$ if both $a$ and $b$ intersect $x$ and the intersection of $a$ with $x$ is higher than the intersection of $b$ with $x$. The below figure shows segments $a$, $b$ and $c$ intersecting sweep line $x$.</p>
:ET