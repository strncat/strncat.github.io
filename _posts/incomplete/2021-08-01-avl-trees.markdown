---
layout: post
title:  "AVL Trees"
date:   2019-05-01 12:01:36 -0700
categories: jekyll update
mathjax: true
---
<b>1 Introduction</b><br>
Let's define some important terms:
<br>
<br>
<i>Height of a node</i>: <br>
longest path from the node to a leaf. To compute the height, we simply take the maximum height of the left and right children and add 1.
<br>
<br>
<i>Height of a binary search tree</i>: <br>
is the length of the longest path from the root to a leaf.
<br>
<br>
A tree is <i>balanced</i> if if its height is $$\theta(\log(n))$$. 
<br>
<br>

<!------------------------------------------------------------------------------------>
<hr>
<br>
<b>2 AVL Trees</b><br>
AVL trees are binary trees and where the heights of left and right children of every node differ by at most +/-1. Based on this, we claim that

| AVL trees are blanaced. |

<i>Proof:</i><br>
We should consider all possible trees. In the best case all nodes have the difference in height between the left and right children is 0. In this case the height of the tree is $$\theta(\log(n))$$
<br><br>
In the worst case, every node's children heights differ by exactly 1. Without the loss of generality assume that the right sub-tree has height 1 more than the left subtree for every node.
<br><br>
Define $$N_h$$ to be the mininum number of nodes in an AVL tree of height $$h$$. Since we know that the height of the left subtree and the right differ by 1, then we can define $$N_h$$ recursively as follows:
<br>
<center>
$$N_h = 1 + N_{h-1} + N_{h-2}$$ 
</center>
This is very similar to Fibonacci, in fact: 
<center>
$$
  \begin{align*}
  	N_h &= 1 + N_{h-1} + N_{h-2} \\
  	&> N_{h-1} + N_{h-2} \\
	&> F_h \\
	&= \frac{\phi^h}{\sqrt{5}} 
  \end{align*}
$$
</center>
Solving for $$h$$ which is what we want to bound:
<center>
$$
  \begin{align*}
  	\log_{\phi}(N_h) &> \log_{\phi}(\frac{\phi^h}{\sqrt{5}}) \\
	h &< 1.440\log(N_h)
  \end{align*}
$$
</center>
Therefore, AVL trees are balanced as we wanted to show.
<br>
Note: There is also another way to solve the recurrence besides using Fibonacci. Note that:
<center>
$$
  \begin{align*}
  $N_h &= 1 + N_{h-1} + N_{h-2} \\
  	&> 1 + 2N_{h-2} \\
  	&> 2N_{h-2} \\
	&= \theta(2^{h/2}) \\
	h &< 2\log(N_h)
  \end{align*}
$$
</center>
<br>
<!------------------------------------------------------------------------------------>
<hr>
<br>
<b>3 Mainting the AVL tree property</b><br>
To insert in an AVL tree, we just insert like we do in a binary search tree. After that we need to fix up the tree to maintain its AVL property. To do so, we use <a href = "https://strncat.github.io/jekyll/update/2019/05/02/binary-tree-rotation.html">rotations</a> but there are multiple cases to handle.
<br>
<br>
Assume we have the following tree on the left. We define the height of a nil node to be -1. We want to insert the node 13. We insert the way we do in a binary search tree to get the tree on the right: 

<svg width="800" height="450" version="1.1" xmlns="http://www.w3.org/2000/svg">
	<ellipse stroke="black" stroke-width="1" fill="none" cx="621.5" cy="55.5" rx="30" ry="30"/>
	<text x="597.5" y="61.5" font-family="Times New Roman" font-size="20">11 (3)</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="553.5" cy="137.5" rx="30" ry="30"/>
	<text x="534.5" y="143.5" font-family="Times New Roman" font-size="20">5 (1)</text>
	<ellipse stroke="black" stroke-width="1" fill="red" fill-opacity="0.25" cx="688.5" cy="137.5" rx="30" ry="30"/>
	<text x="664.5" y="143.5" font-family="Times New Roman" font-size="20">23 (2)</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="613.5" cy="316.5" rx="30" ry="30"/>
	<text x="589.5" y="322.5" font-family="Times New Roman" font-size="20">13 (0)</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="658.5" cy="228.5" rx="30" ry="30"/>
	<text x="634.5" y="234.5" font-family="Times New Roman" font-size="20">17 (1)</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="173.5" cy="55.5" rx="30" ry="30"/>
	<text x="149.5" y="61.5" font-family="Times New Roman" font-size="20">11 (2)</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="100.5" cy="137.5" rx="30" ry="30"/>
	<text x="81.5" y="143.5" font-family="Times New Roman" font-size="20">5 (1)</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="237.5" cy="137.5" rx="30" ry="30"/>
	<text x="213.5" y="143.5" font-family="Times New Roman" font-size="20">23 (1)</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="64.5" cy="228.5" rx="30" ry="30"/>
	<text x="45.5" y="234.5" font-family="Times New Roman" font-size="20">3 (0)</text>
	<text x="349.5" y="132.5" font-family="Times New Roman" font-size="20">---(13)---></text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="213.5" cy="228.5" rx="30" ry="30"/>
	<text x="189.5" y="234.5" font-family="Times New Roman" font-size="20">17 (0)</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="506.5" cy="228.5" rx="30" ry="30"/>
	<text x="487.5" y="234.5" font-family="Times New Roman" font-size="20">3 (0)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="582.5" cy="228.5" rx="30" ry="30"/>
	<text x="554.5" y="234.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="34.5" cy="316.5" rx="30" ry="30"/>
	<text x="6.5" y="322.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="100.5" cy="316.5" rx="30" ry="30"/>
	<text x="72.5" y="322.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="141.5" cy="228.5" rx="30" ry="30"/>
	<text x="113.5" y="234.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="680.5" cy="316.5" rx="30" ry="30"/>
	<text x="652.5" y="322.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="727.5" cy="228.5" rx="30" ry="30"/>
	<text x="699.5" y="234.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="543.5" cy="316.5" rx="30" ry="30"/>
	<text x="515.5" y="322.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="471.5" cy="316.5" rx="30" ry="30"/>
	<text x="443.5" y="322.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="284.5" cy="228.5" rx="30" ry="30"/>
	<text x="256.5" y="234.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="173.5" cy="316.5" rx="30" ry="30"/>
	<text x="145.5" y="322.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="247.5" cy="316.5" rx="30" ry="30"/>
	<text x="219.5" y="322.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="582.5" cy="401.5" rx="30" ry="30"/>
	<text x="554.5" y="407.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<ellipse stroke="black" stroke-width="1" fill="gray" fill-opacity="0.25" cx="648.5" cy="403.5" rx="30" ry="30"/>
	<text x="620.5" y="409.5" font-family="Times New Roman" font-size="20">Nil(-1)</text>
	<polygon stroke="black" stroke-width="1" points="640.482,78.731 669.518,114.269"/>
	<polygon fill="black" stroke-width="1" points="669.518,114.269 668.328,104.91 660.585,111.237"/>
	<polygon stroke="black" stroke-width="1" points="602.35,78.593 572.65,114.407"/>
	<polygon fill="black" stroke-width="1" points="572.65,114.407 581.606,111.441 573.908,105.058"/>
	<polygon stroke="black" stroke-width="1" points="679.107,165.992 667.893,200.008"/>
	<polygon fill="black" stroke-width="1" points="667.893,200.008 675.146,193.976 665.649,190.845"/>
	<polygon stroke="black" stroke-width="1" points="191.958,79.149 219.042,113.851"/>
	<polygon fill="black" stroke-width="1" points="219.042,113.851 218.061,104.468 210.178,110.62"/>
	<polygon stroke="black" stroke-width="1" points="89.464,165.396 75.536,200.604"/>
	<polygon fill="black" stroke-width="1" points="75.536,200.604 83.128,195.004 73.829,191.325"/>
	<polygon stroke="black" stroke-width="1" points="153.552,77.907 120.448,115.093"/>
	<polygon fill="black" stroke-width="1" points="120.448,115.093 129.502,112.442 122.033,105.793"/>
	<polygon stroke="black" stroke-width="1" points="229.85,166.508 221.15,199.492"/>
	<polygon fill="black" stroke-width="1" points="221.15,199.492 228.025,193.031 218.356,190.481"/>
	<polygon stroke="black" stroke-width="1" points="562.609,166.084 573.391,199.916"/>
	<polygon fill="black" stroke-width="1" points="573.391,199.916 575.726,190.776 566.198,193.812"/>
	<polygon stroke="black" stroke-width="1" points="644.841,255.21 627.159,289.79"/>
	<polygon fill="black" stroke-width="1" points="627.159,289.79 635.253,284.943 626.349,280.39"/>
	<polygon stroke="black" stroke-width="1" points="539.733,164.155 520.267,201.845"/>
	<polygon fill="black" stroke-width="1" points="520.267,201.845 528.38,197.032 519.495,192.443"/>
	<polygon stroke="black" stroke-width="1" points="54.82,256.895 44.18,288.105"/>
	<polygon fill="black" stroke-width="1" points="44.18,288.105 51.494,282.146 42.029,278.919"/>
	<polygon stroke="black" stroke-width="1" points="54.82,256.895 44.18,288.105"/>
	<polygon fill="black" stroke-width="1" points="44.18,288.105 51.494,282.146 42.029,278.919"/>
	<polygon stroke="black" stroke-width="1" points="75.859,256.266 89.141,288.734"/>
	<polygon fill="black" stroke-width="1" points="89.141,288.734 90.74,279.436 81.484,283.222"/>
	<polygon stroke="black" stroke-width="1" points="112.823,164.852 129.177,201.148"/>
	<polygon fill="black" stroke-width="1" points="129.177,201.148 130.449,191.8 121.332,195.908"/>
	<polygon stroke="black" stroke-width="1" points="700.318,165.074 715.682,200.926"/>
	<polygon fill="black" stroke-width="1" points="715.682,200.926 717.127,191.603 707.935,195.542"/>
	<polygon stroke="black" stroke-width="1" points="665.776,257.604 673.224,287.396"/>
	<polygon fill="black" stroke-width="1" points="673.224,287.396 676.134,278.422 666.433,280.847"/>
	<polygon stroke="black" stroke-width="1" points="495.413,256.376 482.587,288.624"/>
	<polygon fill="black" stroke-width="1" points="482.587,288.624 490.19,283.038 480.898,279.342"/>
	<polygon stroke="black" stroke-width="1" points="518.128,256.155 531.872,288.845"/>
	<polygon fill="black" stroke-width="1" points="531.872,288.845 533.381,279.532 524.162,283.408"/>
	<polygon stroke="black" stroke-width="1" points="251.267,164.155 270.733,201.845"/>
	<polygon fill="black" stroke-width="1" points="270.733,201.845 271.505,192.443 262.62,197.032"/>
	<polygon stroke="black" stroke-width="1" points="224.312,256.484 236.688,288.516"/>
	<polygon fill="black" stroke-width="1" points="236.688,288.516 238.469,279.252 229.141,282.856"/>
	<polygon stroke="black" stroke-width="1" points="201.086,255.811 185.914,289.189"/>
	<polygon fill="black" stroke-width="1" points="185.914,289.189 193.776,283.975 184.673,279.837"/>
	<polygon stroke="black" stroke-width="1" points="624.697,344.332 637.303,375.668"/>
	<polygon fill="black" stroke-width="1" points="637.303,375.668 638.956,366.38 629.679,370.112"/>
	<polygon stroke="black" stroke-width="1" points="603.221,344.684 592.779,373.316"/>
	<polygon fill="black" stroke-width="1" points="592.779,373.316 600.217,367.513 590.823,364.087"/>
</svg>

We go up the tree to find the first node where it violates the AVL property meanning that the height of the left and right children differ by more than 1. The first node is 23. 


<!------------------------------------------------------------------------------------>
<hr>
<br>
<b>5 Running Time:</b> 
{% highlight c++ %}
void fix_up(Node *x) {
	// assume the current node inserted was x
	// the idea is to go up the tree, searching for the first violating node
    
}
{% endhighlight %}
<br>
<!------------------------------------------------------------------------------------>
<hr>
<br>
<b>6 Detailed Implementation:</b> 
-



<br>
<!------------------------------------------------------------------------------------>
<hr>
<br>
<b>7 References:</b> 
https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/lecture-6-avl-trees-avl-sort/
