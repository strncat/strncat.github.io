---
layout: post
title:  "Kruskal's Minimum Spanning Tree"
date:   2019-04-03 07:01:36 -0700
categories: jekyll update
mathjax: true
---
<svg width="800" height="250" version="1.1" xmlns="http://www.w3.org/2000/svg">
	<ellipse stroke="black" stroke-width="1" fill="none" cx="294.5" cy="68.5" rx="30" ry="30"/>
	<text x="289.5" y="74.5" font-family="Times New Roman" font-size="20">b</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="498.5" cy="68.5" rx="30" ry="30"/>
	<text x="494.5" y="74.5" font-family="Times New Roman" font-size="20">c</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="664.5" cy="147.5" rx="30" ry="30"/>
	<text x="659.5" y="153.5" font-family="Times New Roman" font-size="20">d</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="498.5" cy="218.5" rx="30" ry="30"/>
	<text x="494.5" y="224.5" font-family="Times New Roman" font-size="20">e</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="294.5" cy="218.5" rx="30" ry="30"/>
	<text x="291.5" y="224.5" font-family="Times New Roman" font-size="20">f</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="137.5" cy="159.5" rx="30" ry="30"/>
	<text x="133.5" y="165.5" font-family="Times New Roman" font-size="20">a</text>
	<polygon stroke="black" stroke-width="1" points="324.5,68.5 468.5,68.5"/>
	<text x="391.5" y="89.5" font-family="Times New Roman" font-size="20">4</text>
	<polygon stroke="black" stroke-width="1" points="525.589,81.392 637.411,134.608"/>
	<text x="586.5" y="98.5" font-family="Times New Roman" font-size="20">7</text>
	<polygon stroke="black" stroke-width="1" points="636.917,159.298 526.083,206.702"/>
	<text x="566.5" y="173.5" font-family="Times New Roman" font-size="20">2</text>
	<polygon stroke="black" stroke-width="1" points="468.5,218.5 324.5,218.5"/>
	<text x="391.5" y="209.5" font-family="Times New Roman" font-size="20">6</text>
	<polygon stroke="black" stroke-width="1" points="318.67,200.728 474.33,86.272"/>
	<text x="401.5" y="164.5" font-family="Times New Roman" font-size="20">5</text>
	<polygon stroke="black" stroke-width="1" points="163.455,144.456 268.545,83.544"/>
	<text x="220.5" y="135.5" font-family="Times New Roman" font-size="20">1</text>
	<polygon stroke="black" stroke-width="1" points="165.583,170.053 266.417,207.947"/>
	<text x="201.5" y="210.5" font-family="Times New Roman" font-size="20">2</text>
	<polygon stroke="black" stroke-width="1" points="498.5,188.5 498.5,98.5"/>
	<text x="503.5" y="149.5" font-family="Times New Roman" font-size="20">3</text>
	<polygon stroke="black" stroke-width="1" points="294.5,188.5 294.5,98.5"/>
	<text x="299.5" y="149.5" font-family="Times New Roman" font-size="20">1</text>
</svg>
<!---------------------------------------------------------------------------------------->
<h4><b>References</b></h4>
These are just my class notes from following http://web.stanford.edu/class/cs161/schedule.html
<br>
<br>
<!---------------------------------------------------------------------------------------->
<h4><b>Introduction</b></h4>
Let $$G=(V,E)$$ be undirected, weighted graph with $$V$$ vertices and $$E$$ edges. A minimum spanning tree is a tree that connects all the vertices in $$V$$ of minimal cost. Kruskal's approach is to always take the cheapest edge from the graph that won't create a cycle. In another way, Kruskal is maintaining a forest at each step. We slowly combine these trees to form the final single tree that covers all vertices. 
<br>
<br>
<!---------------------------------------------------------------------------------------->
<h4><b>Algorithm (slow version)</b></h4>
{% highlight c++ %}
E = Sort the edges by non-decreasing weight.
MST = {}
for e in sorted E {
	if we can add e to MST without creating a cycle {
		add e to MST
	}
}
return MST
{% endhighlight %}
<br>
<!---------------------------------------------------------------------------------------->
<h4><b>Algorithm (fast version)</b></h4>
The reason why this implementation is the standard Kruskal implementation is because we use a special data structure to maintain the forests kruskal is maintaining in the algorithm. The data structure is union-find which supports the following operations
- makeSet(u): creates a set $$\{u\}$$
- find(u): returns the set that $$u$$ is in.
- union(u,v): merge the set that $$u$$ is in with the set that $$v$$ is in.

{% highlight c++ %}
E = Sort the edges by non-decreasing weight.
MST = {}
for v in V {
	makeSet(v)
}
for (u,v) in E {
	if find(u) != find(v) {
		add {u,v} to MST
		union(u,v)
	}
}
return MST
{% endhighlight %}
<br>
<!---------------------------------------------------------------------------------------->
<h4><b>Example</b></h4>
We initialize the following forests $$\{a\}, \{b\}, \{c\}, \{d\}, \{e\}, \{f\}$$. We also sort the edges by non-decreasing weight and proceed to merge our forests. Assume the sorted order is the following: $$\{a,b\}, \{b,f\}, \{a,f\}, \{e,d\}, \{c,e\}, \{b,c\}, \{c,f\}, \{f,e\}, \{c,d\}$$
<br><br>
<i>Iteration 0</i><br>
The first edge to consider is either $$\{a,b\}$$. Since $$a$$ and $$b$$ are not in the same set, we add the edge to the MST and combine both $$a$$ and $$b$$.

<i>Iteration 1</i><br>
We next consider  $$\{b,f\}$$. Since $$b$$ and $$f$$ are not in the same set, we add the edge to the MST and combine both $$b$$ and $$f$$. So now we have the following forests: $$\{a, b, f\}, \{c\}, \{d\}, \{e\}$$

<i>Iteration 2</i><br>
We next consider  $$\{a,f\}$$. Since $$a$$ and $$f$$ are in the same set, we don't combine the nodes and don't add the edge to the MST.


At the end of the algorithm, the minimum spanning tree is the following tree:
<svg width="800" height="250" version="1.1" xmlns="http://www.w3.org/2000/svg">
	<ellipse stroke="black" stroke-width="1" fill="none" cx="294.5" cy="68.5" rx="30" ry="30"/>
	<text x="289.5" y="74.5" font-family="Times New Roman" font-size="20">b</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="498.5" cy="68.5" rx="30" ry="30"/>
	<text x="494.5" y="74.5" font-family="Times New Roman" font-size="20">c</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="664.5" cy="147.5" rx="30" ry="30"/>
	<text x="659.5" y="153.5" font-family="Times New Roman" font-size="20">d</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="498.5" cy="218.5" rx="30" ry="30"/>
	<text x="494.5" y="224.5" font-family="Times New Roman" font-size="20">e</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="294.5" cy="218.5" rx="30" ry="30"/>
	<text x="291.5" y="224.5" font-family="Times New Roman" font-size="20">f</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="137.5" cy="159.5" rx="30" ry="30"/>
	<text x="133.5" y="165.5" font-family="Times New Roman" font-size="20">a</text>
	<polygon stroke="black" stroke-width="1" points="324.5,68.5 468.5,68.5"/>
	<text x="391.5" y="89.5" font-family="Times New Roman" font-size="20">4</text>
	<polygon stroke="black" stroke-width="1" points="636.917,159.298 526.083,206.702"/>
	<text x="566.5" y="173.5" font-family="Times New Roman" font-size="20">2</text>
	<polygon stroke="black" stroke-width="1" points="163.455,144.456 268.545,83.544"/>
	<text x="220.5" y="135.5" font-family="Times New Roman" font-size="20">1</text>
	<polygon stroke="black" stroke-width="1" points="498.5,188.5 498.5,98.5"/>
	<text x="503.5" y="149.5" font-family="Times New Roman" font-size="20">3</text>
	<polygon stroke="black" stroke-width="1" points="294.5,188.5 294.5,98.5"/>
	<text x="299.5" y="149.5" font-family="Times New Roman" font-size="20">1</text>
</svg>
<br>
<!---------------------------------------------------------------------------------------->
<h4><b>Proof of Correctness</b></h4>
This first section is exactly copied from Prim's so I should probably just link it, instead of copy/pasting.
<br><br>
Why does this algorithm find a minimum spanning tree? Before we can answer that, let's define some terms and prove some lemma that will be useful in the main proof. Let $$G=(V,E)$$ be the graph below and let $$S$$ be the set of yellow edges in $$G$$.  

![my photo]({{ site.url }}/assets/cut.png)

- A <b>cut</b> is a partition of the vertices into two non-empty parts. the red line (cut) partitions $$G$$ into $$\{a,b,f,e\}$$ and $$\{c,d\}$$.
- A cut <b>respects</b> $$S$$ if no edges in $$S$$ cross the cut. None of the yellow edges cross the red cut.
- An edge crossing the cut is called <b>light</b> if it has the smallest weight of any edge crossing the cut. In this case, $$\{e,d\}$$ is a light edge.

| Lemma: Let $$S$$ be a set of edges and consider a cut that respects $$S$$. Suppose there is an MST containing $$S$$. Let $$\{u,v\}$$ be a light edge. Then there is an MST containing $$S \cup \{u,v\}$$ |

<i>Proof:</i> Let $$S$$ be a set of edges and and consider a cut that respects $$S$$. Let $$T$$ be an MST containing $$S$$. Let $$\{u,v\}$$ be a light edge. There are two cases. <br>
Case 1: $$\{u,v\}$$ is in $$T$$, then we're done. <br>
Case 2: $$\{u,v\}$$ is not in $$T$$. By the definition of MST, adding $$\{u,v\}$$ will create a cycle in $$T$$. Since the sets resulting from the cut must be non-empty. This means that we must have an edge that crosses the cut in $$T$$. Let that edge be $$\{x,y\}$$. Consider replacing $$\{u,v\}$$ with $$\{x,y\}$$ to produce the new tree $$T'$$. $$T$$ is still an MST since we deleted $$\{x,y\}$$. $$T'$$ has also a cost of at most the cost of $$T$$ since \{u,v\} is a light edge. Therefore, $$T'$$ is an MST which includes both $$\{u,v\}$$ and $$S$$ which is what we wanted to show. $$\blacksquare$$
<br>

| Theorem: Kruskal will correctly find a minimum spanning tree |

<i>Proof:</i> <br>
<b>Inductive Hypothesis: </b>After adding the $$t$$'th edge, there exists an MST with the edges added so far.
<br>

<b>Base Case: </b> After adding the 0'th edge, there exists an MST with the edges added so far.
<br>
<br>
<b>Inductive Step:</b> Suppose the inductive hypothesis holds for $$t$$. Let $$S$$ be the set containing the edges added so far and so there is an MST extending them by the inductive hypothesis. Kruskal adds the next edge that combines some trees $$T_1$$ and $$T_2$$ from $$S$$. Consider the cut $$T_1$$ and $$V-T_1$$. This cut respects $$S$$. By the Lemma above, that edge is safe to add. Therefore, there is still an MST extending the new set of edges.
<br>
<br>
<b>Conclusion:</b> After adding the $$n-1$$'st edge, there exists an MST with the edges added so far. At this point we have reached all vertices and the $$n-1$$ edges we have is an MST.$$\blacksquare$$
<br>
<br>
<!---------------------------------------------------------------------------------------->
<h4><b>Running Time</b></h4>
Assume we have $$n$$ vertices and $$m$$ edges. First of all, sorting the edges will take time $$O(m\log(m)) = m\log(n^2) = O(m\log(n))$$. If radixSort can be utilized then we can do this step in time $$O(m)$$. 
<br><br>
We then have $$n$$ calls to makeSet, $$2m$$ calls to find and $$n$$ calls to union. These operations run in amortized time $$O(\alpha(n))$$ where $$\alpha(n)$$ is the inverse Ackerman function and $$\alpha(n) \leq 4$$ provided that $$n$$ is smaller than the number of atoms in the universe.
<br><br>
Therefore, the total time is just $$O(m\log(n))$$ which is similar to Prim if we use a Red Black Tree and closer to $$O(m)$$ if we use radixSort.
<br>
<br>
<!---------------------------------------------------------------------------------------->
<h4><b>Implementation</b></h4>
https://github.com/strncat/algorithms-and-data-structures/tree/master/graphs/minimum-spanning-trees/kruskal





