---
layout: post
title:  "Cycles in Graphs"
date:   2019-07-09 12:01:36 -0700
categories: jekyll update
mathjax: true
---
![my photo]({{ site.url }}/assets/graphs/cycle/1.png)
We are given a graph $$G = (V,E)$$ and we want to know if there exists a cycle in $$G$$. 
<br>
<br>
<!----------------------------------------------------------------------------------->
<h4><b>Undirected Graphs</b></h4>
This is extremely simple. We already keep track of nodes visited so far. If it happens during our search that we come across a visited node then we're done! there must exists a cycle otherwise, we won't ever re-visit any vertex in $$G$$. 
{% highlight c++ %}
bool bfs(int start, std::vector<std::vector<int>>& graph) {
    std::queue<int> q;
    q.push(start);
    std::vector<int> visited(graph.size(), false);
    visited[start] = true;
    while (!q.empty()) {
        int v = q.front();
        q.pop();
        for (int i = 0; i < graph[v].size(); i++) {
            int u = graph[v][i];
            if (visited[u] == false) {
                q.push(u);
                visited[u] = true;
            } else {
                // CYCLE
                return true;
            }
        }
    }
    return false;
}
{% endhighlight %}
<br>
<!----------------------------------------------------------------------------------->
<h4><b>Directed Graphs</b></h4>
Suppose we apply the earlier idea used in undirected graphs. We traverse the nodes and if we see a node we've seen before, we conclude that we found a cycle. Let's take the graph above and start a DFS pass from the node $$a$$ below:

![my photo]({{ site.url }}/assets/graphs/cycle/2.png)

From $$a$$ we visit $$c$$. Node $$c$$ doesn't have neighbors so we mark its finish time and then we go back to $$a$$. We next visit $$b$$ and mark its start time. From $$b$$, we see $$c$$ again! is this a cycle? NO. The idea fails here.
<br>
<br>
In directed graph we instead have three types of nodes. 
- A node that hasn't been discovered yet (we didn't mark its start time yet). Node $$e$$ is one example above. Let's color this node black.
- A node that has been discovered (we marked its start time) but it hasn't been processed yet (we didn't mark its finish time). Let's color this node gray.
- A node that has been processed. We marked its start time and its finish time. Let's color this node white.
<br>
<br>
When will a directed cycle happen? when we re-discover a gray node! below is a continuation of the traversal that started from node $$a$$. We discover nodes $$b, e, f$$ and $$d$$. From $$d$$ we re-discover $$e$$ but $$e$$ has already been discovered because it's gray! This means we have a cycle. 
![my photo]({{ site.url }}/assets/graphs/cycle/3.png)

<!--
Let's go back to the moment when we marked $$e$$'s start time and we saw $$c$$. What does this mean for $$e$$ and $$c$$? Let's recall that the paranthesis theorem (CLRS) says that for any pair of nodes, in this case $$c$$ and $$e$$, one of three cases can happen:
- the intervals [c.start_time, c.finish_time] and [e.start_time, e.finish_time] are disjoint and neither $$c$$ or $$e$$ is a descendant of the other in the depth-first forest. This doesn't apply as the intervals are not disjoint.

- the interval [c.start_time, c.finish_time] is contained within the interval [e.start_time, e.finish_time] and $$c$$
is a descendant of $$e$$ in the depth-first tree. This doesn't apply either (above graph).

- the interval [e.start_time, e.finish_time] is contained within the interval [c.start_time, c.finish_time] and $$e$$ is a descendant of $$c$$ in the depth-first tree. Aha! this one applies!
-->

The following code implements this idea which is just a small modification to a typical depth search first traversal.

{% highlight c++ %}
void dfs(graph& g, int v, int *color) {
    color[v] = gray;
    for (auto i = 0; i < g[v].size(); i++) {
        int u = g[v][i];
        if (color[u] == white) {
            dfs(g, u, color);
        } else if (color[u] == gray) {
            // CYCLE
        }
    }
    // we are done with the node for good
    color[v] = black;
}
{% endhighlight %}
<br>
<!----------------------------------------------------------------------------------->
<h4><b>Correctness Proof</b></h4>
TODO
<br>
<br>
<!----------------------------------------------------------------------------------->
<h4><b>Implementation</b></h4>
https://github.com/strncat/algorithms-and-data-structures/tree/master/graphs/cycles
<br>
<br>
<!----------------------------------------------------------------------------------->
<h4><b>References</b></h4>
CLRS
<br>
<br>

