---
layout: post
title:  "Tries (Prefix Trees)"
date:   2019-07-06 12:01:36 -0700
categories: jekyll update
mathjax: true
---
<b>0 References</b><br>
- Algorithms by Robert Sedgwick and Kevin Wayne
<br>
- http://web.stanford.edu/class/cs166/
<br>
<br>
<hr>
<!------------------------------------------------------------------------------------>
<br>
<b>1 Introduction</b>
<br>
<img src="{{ site.url }}/assets/trie/intro.png" width="100%">
Consider the following problem: a user is typing a string (call it $$p$$) of length $$n$$ in a search engine. As the user types, we want to display the strings that the user might have intended to type. For example, if the user types "cas", we might want to display  the words "cast" and "castro" to the user.
<br><br>
Formally, given $$k$$ strings of total length $$m$$ and a string (pattern) $$p$$ of length $$n$$. We want to find all the strings that start with $$p$$. The simplest solution would be to look at all strings and compare each string with the pattern we have. This will take $$O(m)$$ time. However, suppose that we now we have $$r$$ patterns, then this approach will take $$O(mr)$$ time which is really slow. Similar to the RMQ notation, for the previous approach, we will write $$\langle O(1), O(mr)\rangle$$ where $$O(1)$$ is the preprocessing time and $$O(mr)$$ is the query time. So how can we make it faster?
<br>
<br>
<hr>
<!------------------------------------------------------------------------------------>
<br>
<b>2 The Trie Data Structure</b>
<br>
<img src="{{ site.url }}/assets/trie/1.png" width="100%">
<br>
The trie (pronounced "try") data structure is an efficient data structure that can help us achieve a faster running time when searching for keys. In the picture above, we can form the following words (words end with colored nodes): cake, cakes, cat, civil and cider.
<br>
Let's start with studying some properties of tries:
<br><br>
<> Each node indicates whether it is the end of a valid word or not. In the above example, colored nodes represent the end of valid words. We can simply use a bool value (yes/no) in each node to do this.<br>
<> Each node will have $$R$$ children/edges where $$R$$ is the alphabet size. <br>
<> Edges represent letters. For example, the root node has one edge ($$c$$) to the nodes below.<br>
<> Each node also has only one parent.<br>
<br>
Let's look at what a trie really looks like:
<br>
<img src="{{ site.url }}/assets/trie/2.png" width="100%">
You can see above, the root has only one edge of value $$c$$. From $$c$$, we can traverse to either $$a$$ or $$i$$. From $$a$$ we can traverse to $$k$$ or $$t$$. From $$i$$ we can traverse to $$d$$ or $$v$$ and so on.
<br>
<br>
<hr>
<!------------------------------------------------------------------------------------>
<br>
<b>2 Node and Edges Representation</b>
<br>
<br>
This can be done in many ways. The following is just one way that uses a struct to represent a node. This struct will include a bool value to indicate whether we have arrived at a valid word or not. Each node/struct will also have an array to store all possible edges. Each array position holds a pointer to a node struct, intially all set to NULL. Here, we will consider the English alphabet which consists of 26 letters. We will use position 0 to represent 'a', 1 to represent 'b' and so. We will take advantage of the fact that the ascii value for the letter a is 97 and z is 122 and so to store 'c', we simply find the right position in the array by subtracting 'a' (97) from 'c' (99) to get 2 which is the correct position for 'c'. 
{% highlight c++ %}
#define SIZE 26
typedef struct node {
    bool marker; // this is to indicate if it's the end of a valid word
    int value; // we'll use this to keep track of the number of possible matches at this node
    struct node *children[SIZE] = {NULL}; // 26 possible edges, edges represent letters in a trie
} node;
// a trie consists of a a root node and that's about it
typedef struct trie {
    node *root;
    trie() {
        root = new node();
    }
{% endhighlight %}
<br>
<br>
<hr>
<!------------------------------------------------------------------------------------>
<br>
<b>3 Prefix Search</b>
<br>
<br>
How do we search for prefixes now? given a pattern $$p$$ we want to output all possible matches. We just traverse down the root and keep matching until we reach the last character of the prefix we're searching. If we want an exact match then we check if the node has a marker to indicate that it ends a valid word and return true if it does. But if we want to print all possible matches then we can take this node we're currently on and then just do a simple depth first search down every branch to collect every possible word.
<br>
<br>
Let's look at search first:
{% highlight c++ %}
// return NULL if the pattern doesn't exist, otherwise 
// return the node we reached last (should have the pattern's last letter)
node* search(std::string word) {
    long m = word.length();
    node *current = root;
    // search for word in the tree rooted at root
    for (int i = 0; i < m; i++) {
        // find the correct location for letter word[i]
        int index = word[i] - 'a';
        if (!current->children[index]) { // null pointer
            return NULL; // not found
        }
        // follow that link
        current = current->children[index];
    }
    return current;
}
{% endhighlight %}
<br>
Search is simple. We just traverse down the root and stop when we're done matching every character in the prefix. We will then return that last node. This takes $$O(n)$$ time only. Next, we'll look at word_with_prefix:
<br>
<br>
{% highlight c++ %}
// prefix match: print all possible matches
int words_with_prefix(std::string prefix) {
    node *current = search(prefix);
    if (current == NULL) { // no matches
		return 0; 
	}
    // right now, current has the last letter of the prefix
    // any valid word that comes after is a possible match 
    // we want to return all of them, we use a queue for that
    std::queue<std::string> q;
    collect(current, prefix, q);
    while (!q.empty()) {
        printf("%s\n", q.front().c_str());
        q.pop();
    }
    return current->value; // total matches
}
{% endhighlight %}
<br>
Here, we utilize <b>search</b> to find the prefix (returns the last node in the prefix) and then pass a queue to <b>collect</b> which will fill the queue with all matches. Next we'll look at collect:
<br>
<br>
{% highlight c++ %}
// collect matches recursively from all branches
// save them in q
void collect(node *current, std::string prefix,
    std::queue<std::string> &q) {
    if (current == NULL) { return; }
    if (current->marker) {
        q.push(prefix);
    }
    for (int i = 0; i < SIZE; i++) {
        if (current->children[i] != NULL) {
            char c = i + 'a';
            collect(current->children[i], prefix + c, q);
        }
    }
}
{% endhighlight %}
<br>
<b>Collect</b> perform a depth first search on the tree rooted at current. As we go down each path, we will collect the characters in the string prefix. Once we're at a leaf node and its value (marker) is not 0, meaning it's a valid word, then we will push it on the queue.
<br>
<br>
<br>
<hr>
<!------------------------------------------------------------------------------------>
<br>
<b>4 Insert</b>
<br>
<br>
To insert a key we follow a similar process. We start at the root and we also start at the beginning of the key to be inserted. If the letter we're on has already a link in the root then we follow it a long and move to the next letter as well. If the link is null then we create a new node for that letter.
<br>
{% highlight c++ %}
void insert(std::string word) {
    if (search(word)) { // word exists
        return;
    }
    int length = (int) word.length();
    node *current = root;
    current->value++; // increment word count
    for (int i = 0; i < length; i++) {
        int index = word[i] - 'a';
        if (!current->children[index]) {
             // this letter doesn't exist, create it
            current->children[index] = new node();
        }
        // this letter has a link already, follow it along
        current = current->children[index];
        current->value++;
    }
    // mark the last node, this is the end of our word
    // this is a marker of an end to a valid word
    current->marker = true;
}
{% endhighlight %}
So insert takes $$O(n)$$ time as well!
<br>
<br>
<hr>
<!------------------------------------------------------------------------------------>
<br>
<b>5 Delete</b>
<br>
To be added.
<br>
<br>
<hr>
<!------------------------------------------------------------------------------------>
<br>
<b>6 Longest Prefix</b>
<br>
To be added
<br>
<br>
<hr>
<!------------------------------------------------------------------------------------>
<br>
<b>7 Running Time</b>
<br>
<br>
We mentioned above that insert and search both take $$O(n)$$ time where $$n$$ is the length of the pattern. How long does it take to build a trie to represent all words of total length $$m$$? We need to make $$k$$ insertions each of which will take $$O($$size of each word$$)$$. Since the total length of all words is $$m$$, then the total time is $$O(m)$$ which happens only once initially. Therefore, in the RMQ notation we will have $$\langle O(m), O(n) \rangle$$ which is a lot better than the naive solution. 
<br>
<br>
<hr>
<!------------------------------------------------------------------------------------>
<br>
<b>8 Full Implementation:</b> 
<br>
https://github.com/strncat/algorithms-and-data-structures/tree/master/strings/trie.cpp
<br>
<br>


