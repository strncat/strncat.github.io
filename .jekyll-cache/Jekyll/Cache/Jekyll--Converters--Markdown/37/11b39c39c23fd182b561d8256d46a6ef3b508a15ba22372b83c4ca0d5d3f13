I"’3<p>In this note, we would like to analyze the running time of MergeSort. Recall that MergeSort is a divide and conquer algorithm where we repeatedly split the input into two halfs and then call <i>MergeSort</i> again on each half. Once weâ€™re done, we can combine the halfs in <i>Merge</i>. The follow pesudo-code shows this (Based on CLRS)</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">MergeSort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">last</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="n">floor</span><span class="p">((</span><span class="n">first</span><span class="o">+</span><span class="n">last</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">MergeSort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">first</span><span class="p">,</span><span class="n">mid</span><span class="p">)</span>
        <span class="n">MergeSort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">last</span><span class="p">)</span>
        <span class="n">Merge</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">first</span><span class="p">,</span><span class="n">mid</span><span class="p">,</span><span class="n">last</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><br />
<!-----------------------------------------------------------------------------------></p>
<h4><b>Recursion Tree Method</b></h4>
<p>How long does MergeSort take? How many operations are we performing? Letâ€™s look at what MergeSort is doing at each level of of the recursion tree. We will first go all way down splitting the array and calling <i>MergeSort</i> on each half until we reach the base case. And then we will go all way up calling <i>Merge</i> in every level until the final <i>Merge</i> call which combines the two sorted halfs of the array.
<br />
<br />
<i>Level 0:</i>
<br />
At the top level, we have the whole input, array \(A\) of size \(n\). We will recursively call MergeSort on each half of the \(A\).
<img src="http://localhost:4000/assets/merge/1.png" width="100%" />
<i>Level 1:</i>
<br />
In this level, we have two calls to MergeSort. Each call is on one half of the array. The total number of elements from all calls though is still \(n\).
<img src="http://localhost:4000/assets/merge/2.png" width="100%" />
<i>Level 2:</i>
<br />
In level 2, we will have 4 calls. Each call is on an array of size \(n/4\). We also notice here that the total number of elements is also \(n/4+n/4+n/4+n/4=n\).
<img src="http://localhost:4000/assets/merge/3.png" width="100%" />
<i>Level \(t\):</i>
<br />
At the \(t\)â€˜th level, we will have \(2^t\) calls to MergeSort. Each of the arrays passed to MergeSort is of size \(n/2^t\). Again, the total number of elements is also \(n\).
<img src="http://localhost:4000/assets/merge/4.png" width="100%" />
<i>Level ?:</i>
<br />
When do we stop dividing/recursively calling MergeSort? Our base case happens when \(first == last\). This means that we stop the recursion when each call has an array of size 1. How many times do we divide \(n\) by 2 (weâ€™re dividing the array into two halfs at each step) to reach 1? This is precisely what logs give us. \(log_d(n)\) is the number of times that we divide \(n\) by \(d\) to reach 1. Therefore, at the \(log_2(n)\) level, each array will be of size 1 1 and this is when stop calling MergeSort again. After this step, we will start calling Merge now to combine everything together!
<img src="http://localhost:4000/assets/merge/5.png" width="100%" />
<br />
<br />
Now letâ€™s climb up the recursion tree. <i>Merge</i> merges two sorted arrays with \(cn\) operations where \(n\) is the size of the array and \(c\) is a positive constant. To see why itâ€™s linear, below is what merge is exactly doing</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">merge</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">first</span><span class="p">,</span> <span class="kt">int</span> <span class="n">last</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mid</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">b</span><span class="p">[</span><span class="n">mid</span> <span class="o">-</span> <span class="n">first</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="p">[</span><span class="n">last</span> <span class="o">-</span> <span class="n">mid</span><span class="p">],</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="c1">// fill both arrays with the two sorted halfs</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">first</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">first</span><span class="p">];</span>  <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">last</span> <span class="o">-</span> <span class="n">mid</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="n">c</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span> <span class="p">}</span>
    <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="n">first</span><span class="p">;</span>
    <span class="c1">// combine both arrays one element at a time</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">c</span><span class="p">[</span><span class="n">m</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">a</span><span class="p">[</span><span class="n">index</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">a</span><span class="p">[</span><span class="n">index</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span> <span class="n">a</span><span class="p">[</span><span class="n">index</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">];</span> <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">m</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span> <span class="n">a</span><span class="p">[</span><span class="n">index</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">];</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><br />
<i>Level \(log(n):\)</i>
<img src="http://localhost:4000/assets/merge/5.png" width="100%" />
We know that each array is of size 1 and so there is nothing to do here besides just returning from <i>MergeSort</i>. (Refer to the pseudocode and note (if first &lt; last)). So at this level, we precisely doing \(n\) operations. 
<br />
<br />
<br />
<i>Level \(t\):</i>
<img src="http://localhost:4000/assets/merge/4.png" width="100%" />
At the \(t\)â€˜th level, we have \(2^t\) arrays. Each of these arrays is of size \(n/2^t\). We will perform \(n/2^t * c\) operations per call. Summing everything, we have \(2^t * n/2^t * c = cn\) operations. 
<br />
<br />
So at each level weâ€™re doing at most \(cn\) operations.
<br />
<br />
<!-----------------------------------------------------------------------------------></p>
<h4><b>Summary</b></h4>
<p>Letâ€™s now summarize everything in a nice table:
<img src="http://localhost:4000/assets/merge/final.png" width="100%" />
<br />
<br />
What about the total number of operations for all levels? In other words, what is the running time of merge sort? We have \(log(n)+1\) total levels and in each level weâ€™re doing \(cn\) operations, therefore MergeSort performs \(cn(\log(n)+1)\) operations.
<br /><br />
Let \(f(n) = cn(\log(n)+1)\) and \(g(n) = n\log(n)\). To see that \(f(n) = O(g(n))\), recall that we need to find \(c'\) and \(n_0 &gt; 0\) such that for all \(n \geq n_0\), we have \(0 \leq f(n) \leq c'g(n)\)</p>

<p>Choose \(c'=2c\) and \(n_0=2\) and so for all \(n \geq n_0\) and \(c' = 2c\) we need to prove:</p>
<div center="">
$$
\begin{align*}
0 \leq cn(\log(n)+1) &amp;\leq c'n\log(n) = (2cn)\log(n) \\
\end{align*}
$$
</div>
<p>Solving for \(n\) (\(n\) is positive)</p>
<div center="">
$$
\begin{align*}
\log(n)+1 &amp;\leq 2\log(n) \\
\log(n) &amp;\geq 1 \\
\end{align*}
$$
</div>
<p>This is certainly true for all \(n \geq 2\) and so we are done.
<br />
<br />
<!-----------------------------------------------------------------------------------></p>
<h4><b>The Substitution Method</b></h4>
<p>TODO</p>

<!--Now let's take a step back and forget about the recursion tree. Also assume that we don't know the master theorem. We know that MergeSort divides the input into halfs and performs $$cn$$ operations in Merge. Therefore, we have the following recurrence:
<div center>
$$
\begin{align*}
T(n) = 2T(\frac{n}{2}) + cn
\end{align*}
$$
</div>
How do we go about solving this? The substituition method says generate a guess and prove it formally by induction! How do we guess the solution? One way is expand the recurrence multiple times to help us find a pattern.
<br><br>
Let's guess that $$T(n) = O(n\log(n))$$. In order to prove it formally though, we need to find $$c' > 0$$ and $$n_0 > 0$$ such that for all $$n \geq n_0$$, we have $$T(n) \leq c'n\log(n)$$. In order to find $$c'$$, we can <b>substitute</b> our guess and solve for $$c'$$
<div center>
$$
\begin{align*}
T(n) &= 2T(\frac{n}{2}) + cn \\
&\leq 2c'\frac{n}{2}\log(\frac{n}{2}) + cn \\
&= c'n\log(\frac{n}{2}) + cn \\
&= c'n\log(n)-c'n\log(2) + cn \\
&= c'n\log(n)-c'n + cn \\
&\leq c'n\log(n) + cn \\
\end{align*}
$$
</div>

-->
<!----------------------------------------------------------------------------------->
<h4><b>References</b></h4>
<ul>
  <li><a href="http://web.stanford.edu/class/cs161/schedule.html">Stanford CS161</a></li>
  <li>CLRS</li>
</ul>

:ET