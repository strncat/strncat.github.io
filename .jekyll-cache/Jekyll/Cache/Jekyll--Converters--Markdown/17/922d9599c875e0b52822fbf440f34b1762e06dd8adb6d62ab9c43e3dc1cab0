I"˙J<p><img src="http://localhost:4000/assets/trie/intro.png" width="100%" />
Given a set of \(k\) strings of total length \(m\) and a prefix \(p\) of length \(n\), we want to find all the strings that start with \(p\). The simplest solution would be to match each of the \(k\) strings with the prefix. This will take \(O(m)\) time. However, suppose that we now we have \(r\) patterns, then this approach will take \(O(mr)\) time which is really slow. Similar to the RMQ notation, we will write \(\langle O(1), O(mr)\rangle\) where \(O(1)\) is the preprocessing time and \(O(mr)\) is the query time. How can we make it faster?
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h3>The Trie Data Structure</h3>
<p><img src="http://localhost:4000/assets/trie/1.png" width="100%" />
<br />
The trie (pronounced ‚Äútry‚Äù) data structure is an efficient data structure that can help us achieve a faster running time when searching for prefixes. In the picture above forexample, we can find the words that start with the prefix ‚Äúca‚Äù by starting at the root and traversing down to find the words (words end with colored nodes): cake, cakes and cat.
<br />
<br />
Here are some important properties of tries
<br /></p>
<ul>
  <li>Each node indicates whether it is the end of a valid word or not. In the above example, colored nodes represent the end of valid words. We can simply use a bool value (yes/no) in each node to do this.<br /></li>
  <li>Each node will have \(R\) children/edges where \(R\) is the alphabet size. <br /></li>
  <li>Edges represent letters. For example, the root node has one edge (\(c\)) to the nodes below.<br /></li>
  <li>Each node also has only one parent.<br />
<br />
Let‚Äôs look at what a trie really looks like:
<br />
<img src="http://localhost:4000/assets/trie/2.png" width="100%" />
You can see above, the root has only one edge of value \(c\). From \(c\), we can traverse to either \(a\) or \(i\). From \(a\) we can traverse to \(k\) or \(t\). From \(i\) we can traverse to \(d\) or \(v\) and so on.
<br />
<br />
<!------------------------------------------------------------------------------------></li>
</ul>
<h3>Node and Edges Representation</h3>
<p>This can be done in many ways. The following is just one way that uses a struct to represent a node. This struct will include a bool value to indicate whether we have arrived at a valid word or not. Each node/struct will also have an array to store all possible edges. Each array position holds a pointer to a node struct, intially all set to NULL. Here, we will consider the English alphabet which consists of 26 letters. We will use position 0 to represent ‚Äòa‚Äô, 1 to represent ‚Äòb‚Äô and so. We will take advantage of the fact that the ASCII value for the letter a is 97 and z is 122 and so to store ‚Äòc‚Äô, we simply find the right position in the array by subtracting ‚Äòa‚Äô (97) from ‚Äòc‚Äô (99) to get 2 which is the correct position for ‚Äòc‚Äô.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="cp">#define SIZE 26
</span><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">node</span> <span class="p">{</span>
    <span class="kt">bool</span> <span class="n">marker</span><span class="p">;</span> <span class="c1">// this is to indicate if it's the end of a valid word</span>
    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span> <span class="c1">// we'll use this to keep track of the number of possible matches at this node</span>
    <span class="k">struct</span> <span class="nc">node</span> <span class="o">*</span><span class="n">children</span><span class="p">[</span><span class="n">SIZE</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="nb">NULL</span><span class="p">};</span> <span class="c1">// 26 possible edges, edges represent letters in a trie</span>
<span class="p">}</span> <span class="n">node</span><span class="p">;</span>
<span class="c1">// a trie consists of a a root node and that's about it</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="nc">trie</span> <span class="p">{</span>
    <span class="n">node</span> <span class="o">*</span><span class="n">root</span><span class="p">;</span>
    <span class="n">trie</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
    <span class="p">}</span></code></pre></figure>

<p><br />
<!------------------------------------------------------------------------------------></p>
<h3>Prefix Search</h3>
<p>Given a prefix \(p\) of length \(n\), we want to output all the possible words that start with \(p\). To do, we start with the root of the trie and the first letter of \(p\). We then check if the root contains a non-null node at the first letter of \(p\). If there is, then we move to this new node and advance to the next letter of \(p\). We repeat the same process until we either exit (return NULL) or reach the last letter of \(p\) and return that node.
<br /></p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// return NULL if the pattern doesn't exist, otherwise </span>
<span class="c1">// return the node we reached last (should be the pattern's last letter)</span>
<span class="n">node</span><span class="o">*</span> <span class="nf">find_prefix</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">pattern</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">long</span> <span class="n">m</span> <span class="o">=</span> <span class="n">word</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
    <span class="n">node</span> <span class="o">*</span><span class="n">current</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
    <span class="c1">// search for word in the tree rooted at root</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// find the correct location for letter word[i]</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'a'</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">])</span> <span class="p">{</span> <span class="c1">// null pointer</span>
            <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span> <span class="c1">// not found</span>
        <span class="p">}</span>
        <span class="c1">// follow that link</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">current</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Once we find the prefix (node returned above is not null), we know that all the words in the current subtree are words that start with prefix. To collect all these words, we pass a queue or any container of our choice to <i>collect</i> below. collect is just a depth first search that recursively traverses the subtree rooted at current.
<br /></p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// collect matches recursively from all branches</span>
<span class="c1">// save them in q</span>
<span class="kt">void</span> <span class="nf">collect</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">current</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">prefix</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">q</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">current</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">marker</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">prefix</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">SIZE</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="sc">'a'</span><span class="p">;</span>
            <span class="n">collect</span><span class="p">(</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">prefix</span> <span class="o">+</span> <span class="n">c</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Finally, we utilize <i>find_prefix</i> to find the prefix and then, pass a queue to <i>collect</i> which will fill the queue with all matches.
<br /></p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// prefix match: print all possible matches</span>
<span class="kt">int</span> <span class="nf">words_with_prefix</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">prefix</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">node</span> <span class="o">*</span><span class="n">current</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="n">prefix</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">current</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// no matches</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span> 
	<span class="p">}</span>
    <span class="c1">// right now, current has the last letter of the prefix</span>
    <span class="c1">// any valid word that comes after is a possible match </span>
    <span class="c1">// we want to return all of them, we use a queue for that</span>
    <span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
    <span class="n">collect</span><span class="p">(</span><span class="n">current</span><span class="p">,</span> <span class="n">prefix</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span> <span class="c1">// total matches</span>
<span class="p">}</span></code></pre></figure>

<!------------------------------------------------------------------------------------>
<h3>Insert</h3>
<p>Suppose we want to insert a new word of length \(n\). We follow a similar process. We start at the root and we also start at the beginning of the word to be inserted. If the letter we‚Äôre on has already a link in the root then we follow it a long and move to the next letter as well. If the link is null then we create a new node for that letter.
<br /></p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">word</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">search</span><span class="p">(</span><span class="n">word</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// word exists</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">word</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
    <span class="n">node</span> <span class="o">*</span><span class="n">current</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
    <span class="n">current</span><span class="o">-&gt;</span><span class="n">value</span><span class="o">++</span><span class="p">;</span> <span class="c1">// increment word count</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'a'</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">current</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">])</span> <span class="p">{</span>
             <span class="c1">// this letter doesn't exist, create it</span>
            <span class="n">current</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">node</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="c1">// this letter has a link already, follow it along</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
        <span class="n">current</span><span class="o">-&gt;</span><span class="n">value</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// mark the last node, this is the end of our word</span>
    <span class="c1">// this is a marker of an end to a valid word</span>
    <span class="n">current</span><span class="o">-&gt;</span><span class="n">marker</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><i>insert</i> takes \(O(n)\) which is the length of word.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h3>Delete</h3>
<p>To be added.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h3>Longest Prefix</h3>
<p>To be added
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h3>Running Time</h3>
<p>We mentioned above that insert and search both take \(O(n)\) time where \(n\) is the length of the pattern. How long does it take to build a trie to represent all words of total length \(m\)? We need to make \(k\) insertions each of which will take \(O(\)size of each word\()\). Since the total length of all words is \(m\), then the total time is \(O(m)\) which happens only once initially. Therefore, in the RMQ notation we will have \(\langle O(m), O(n) \rangle\) which is a lot better than the naive solution. 
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h3>Full Implementation</h3>
<p>https://github.com/strncat/algorithms-and-data-structures/tree/master/strings/trie.cpp
<br />
<br />
<!-----------------------------------------------------------------------------------></p>
<h3>References</h3>
<ul>
  <li>Algorithms by Robert Sedgwick and Kevin Wayne
<br /></li>
  <li>http://web.stanford.edu/class/cs166/
<br />
<br /></li>
</ul>
:ET