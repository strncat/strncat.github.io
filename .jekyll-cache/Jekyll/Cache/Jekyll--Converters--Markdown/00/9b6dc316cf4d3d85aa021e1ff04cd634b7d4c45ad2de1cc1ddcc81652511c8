I"w<p><img src="http://localhost:4000/assets/randomized/quickselect/intro.png" width="100%" />
Given an array with $n$ elements. We can find the minimum element or maximum element in $O(n)$ time by doing a linear scan and keeping track of the minimum and maximum elements seen so far. What if we want to find the median element or the $k$th smallest element in general? One approach could be to sort the array in $O(n\log(n))$ time and extracting the $k$th smallest element in $O(1)$ time. Is there a faster way? Fortunately, yes! Quickselect is a randomized algorithm that can find the $k$th smallest element in just $O(n)$ expected time. Moreover, with some smart modification to how we select the pivot, we can achieve a worst-case running time of only $O(n)$ time.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Algorithm</b></h4>
<p>Quickselect turns out to be just a slight modification on quicksort which is described <a href="https://strncat.github.io/jekyll/update/2020/05/21/quicksort.html">here</a>! As a reminder, in quicksort, we start by picking a random pivot,</p>
:ET