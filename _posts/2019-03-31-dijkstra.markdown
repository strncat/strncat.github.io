---
layout: post
title:  "Dijkstra"
date:   2019-03-31 12:01:36 -0700
categories: jekyll update
mathjax: true
---
<svg width="700" height="300" version="1.1" xmlns="http://www.w3.org/2000/svg">
	<ellipse stroke="black" stroke-width="1" fill="none" cx="286.5" cy="93.5" rx="30" ry="30"/>
	<text x="282.5" y="99.5" font-family="Times New Roman" font-size="20">a</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="164.5" cy="234.5" rx="30" ry="30"/>
	<text x="160.5" y="240.5" font-family="Times New Roman" font-size="20">s</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="505.5" cy="93.5" rx="30" ry="30"/>
	<text x="500.5" y="99.5" font-family="Times New Roman" font-size="20">b</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="388.5" cy="234.5" rx="30" ry="30"/>
	<text x="384.5" y="240.5" font-family="Times New Roman" font-size="20">c</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="622.5" cy="234.5" rx="30" ry="30"/>
	<text x="619.5" y="240.5" font-family="Times New Roman" font-size="20">t</text>
	<polygon stroke="black" stroke-width="1" points="184.13,211.813 266.87,116.187"/>
	<polygon fill="black" stroke-width="1" points="266.87,116.187 257.855,118.965 265.417,125.508"/>
	<text x="230.5" y="184.5" font-family="Times New Roman" font-size="20">2</text>
	<polygon stroke="black" stroke-width="1" points="304.084,117.807 370.916,210.193"/>
	<polygon fill="black" stroke-width="1" points="370.916,210.193 370.279,200.781 362.176,206.642"/>
	<text x="343.5" y="156.5" font-family="Times New Roman" font-size="20">1</text>
	<polygon stroke="black" stroke-width="1" points="194.5,234.5 358.5,234.5"/>
	<polygon fill="black" stroke-width="1" points="358.5,234.5 350.5,229.5 350.5,239.5"/>
	<text x="271.5" y="255.5" font-family="Times New Roman" font-size="20">1</text>
	<polygon stroke="black" stroke-width="1" points="316.5,93.5 475.5,93.5"/>
	<polygon fill="black" stroke-width="1" points="475.5,93.5 467.5,88.5 467.5,98.5"/>
	<text x="391.5" y="114.5" font-family="Times New Roman" font-size="20">2</text>
	<polygon stroke="black" stroke-width="1" points="524.657,116.587 603.343,211.413"/>
	<polygon fill="black" stroke-width="1" points="603.343,211.413 602.082,202.064 594.386,208.45"/>
	<text x="548.5" y="184.5" font-family="Times New Roman" font-size="20">1</text>
	<polygon stroke="black" stroke-width="1" points="418.5,234.5 592.5,234.5"/>
	<polygon fill="black" stroke-width="1" points="592.5,234.5 584.5,229.5 584.5,239.5"/>
	<text x="500.5" y="255.5" font-family="Times New Roman" font-size="20">6</text>
	<polygon stroke="black" stroke-width="1" points="407.657,211.413 486.343,116.587"/>
	<polygon fill="black" stroke-width="1" points="486.343,116.587 477.386,119.55 485.082,125.936"/>
	<text x="452.5" y="184.5" font-family="Times New Roman" font-size="20">4</text>
</svg>
<h4><b>References</b></h4>
These are just my class notes from following http://web.stanford.edu/class/cs161/schedule.html
<br>
<br>
<!------------------------------------------------------------------------------------>
<h4><b>Introduction</b></h4>
Dijkstra solves the shortest weighted path problem in a weighted graph with non-negative edge weights. If we want to find the shortest path between nodes $$s$$ and $$t$$ in the above graph then the shortest path is $$s \rightarrow a \rightarrow b \rightarrow t$$.
<br>
<br>
<!------------------------------------------------------------------------------------>
<h4><b>Algorithm</b></h4>
{% highlight c++ %}
Set all vertices to not-sure
d[v] = infinity for all v in V
d[s] = 0
while there are not-sure nodes {
	pick the not-sure node u with the smallest estimate d[u].
	for each neighbor v of u {
		if (d[v] < d[u] + weight(u,v)) {
			// It is cheaper to reach v from u than the current path
			d[v] = d[u] + weight(u,v)
		}
	}
	Mark u as sure
	// at this point we know that d[u] = distance(s,v) (proof below)
}
{% endhighlight %}
<br>
<!------------------------------------------------------------------------------------>
<h4><b>Example</b></h4>
In the above graph, we maintain a set of not-sure nodes $$\{s, a, b, c, t\}$$. We then assign $$d[v] = \infty$$ for all nodes. For the source node, we update its estimate to zero. $$d[s] = 0$$.
<br><br>
<i>Iteration 0</i><br>
We extract the minimum not-sure node $$s$$. We we now update each neighbor according to the algorithm. After updating each neightbor we get the following the values. Also, after updating all neighbors, we mark $$s$$ as sure.

| Iteration | s | a | b | c | t |
|-------|--------|---------|
| 0 (extract $$s$$) | 0 | 2 | $$\infty$$ | 1 | $$\infty$$ |


<i>Iteration 1</i><br>
We extract the minimum again from the not-sure nodes. This time we extract $$c$$. We update all the neighbors and at the end of this iteration, we mark $$c$$ as sure.


| Iteration | s | a | b | c | t |
|-------|--------|---------|
| 0 (extract $$s$$) | 0 | 2 | $$\infty$$ | 1 | $$\infty$$ |
| 1 (extract $$c$$) | 0 | 2 | 5 | 1 | 7 |

<i>Final iteration</i><br>
We continue with the same process. We extract the node $$a$$ and update its neighbors. We then mark it as sure, meaning that the distance from node $$s$$ to node $$a$$ is 2 and will not change again. We next extract $$b$$ and update the neighbors again. We then mark $$b$$ as sure. We finally extract $$t$$ which has no out-going edges. At the end of the algorithm, we see that we generated all the shortest paths from $$s$$ to all the other nodes in the graph.

| Iteration | s | a | b | c | t |
|-------|--------|---------|
| 0 (extract $$s$$) | 0 | 2 | $$\infty$$ | 1 | $$\infty$$ |
| 1 (extract $$c$$) | 0 | 2 | 5 | 1 | 7 |
| 2 (extract $$a$$) | 0 | 2 | 4 | 1 | 7 |
| 3 (extract $$b$$) | 0 | 2 | 4 | 1 | 5 |
| 4 (extract $$t$$) | 0 | 2 | 4 | 1 | 5 |

<br>
<!------------------------------------------------------------------------------------>
<h4><b>Extracting the path</b></h4>
To reconstruct the actuall path take, we just maintain a pointer to the parent node. We simply keep an additional array $$p$$ and modify the update step as follows:
<br>
{% highlight c++ %}
p[v] = -1 for all v in V
while there are not-sure nodes {
	if (d[v] < d[u] + weight(u,v)) {
		// we maintain a parent link
		p[v] = u
	}
}
{% endhighlight %}
<br>
<!------------------------------------------------------------------------------------>
<h4><b>Proof of Correctness</b></h4>
Why does Dijkstra work? We need to prove two important claims in order to prove that Dijkstra is correct.
<br>

| Claim 1: For all $$v$$, $$d[v] \geq d(s,v)$$. That is, $$d[v]$$ will never be an underestimate for any node $$v$$. |

<i>Proof:</i> <br>
<b>Inducive Hypothesis:</b> After $$t$$ iterations, $$d[v] \geq d(s,v)$$ for all $$v$$. <br>

<b>Base Case:</b> After 0 iterations, the algorithms sets $$d[s]= 0 = d(s,s)$$ and sets $$d[v]$$ to $$\infty$$ for all $$v \neq s$$ and therefore we have $$d[v] \geq d(s,v)$$, as required.<br>

<b>Inductive Step:</b> Assume that after $$t$$ iterations, $$d[v] \geq d(s,v)$$ for all $$v$$. We will prove the inequality holds after $$t+1$$ iterations. At iteration $$t+1$$, we pick the minimum not-sure node $$u$$ and then update all neighbors $$v$$ such that:
$$d[v] = min(d[v], d[u]+w(u,v))$$. To see that $$d[v] \geq d(s,v)$$, notice that: <br>
(1) $$d[v] \geq d(s,v)$$ by the inductive hypothesis. <br>
(2) $$d[u] + w(u,v) \geq d(s,v)$$. This is because we know that $$d(s,v) \leq d(s,u) + d(u,v)$$ and we also know that $$d[u] \geq d(s,u)$$ by the inductive hypothesis. Therefore, $$d(s,v) \leq d[u] + d(u,v)$$.

<b>Conclusion:</b> 
After the algorithm terminates, we have $$d[v] \geq d(s,v)$$ for all $v$ in $V$, as required. $$\blacksquare$$
<br>

| Claim 2: When a vertex $$u$$ is marked sure, $$d[u] = d(s,u)$$ |


<i>Proof:</i> <br>
<b>Inducive Hypothesis:</b> When the t'th vertex $$v$$ is marked as sure, $$d[v] = d(s,v)$$. <br>

<b>Base Case:</b> When the first vertex $$s$$ is marked sure, we know that $$d[s]=0=d(s,s)$$, as required. <br>

<b>Inductive Step:</b> Suppose we're about to mark vertex $$u$$ as sure, and assume every vertex already marked as sure has $$d[v]=d(s,v)$$. We will show that $$d[u]=d(s,u)$$. Consider a shortest path from $$s$$ to $$u$$. 

<svg width="800" height="200" version="1.1" xmlns="http://www.w3.org/2000/svg">
	<ellipse stroke="black" stroke-width="1" fill="none" cx="101.5" cy="106.5" rx="30" ry="30"/>
	<text x="97.5" y="112.5" font-family="Times New Roman" font-size="20">s</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="366.5" cy="122.5" rx="30" ry="30"/>
	<text x="362.5" y="128.5" font-family="Times New Roman" font-size="20">z</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="235.5" cy="65.5" rx="30" ry="30"/>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="516.5" cy="65.5" rx="30" ry="30"/>
	<text x="510.5" y="71.5" font-family="Times New Roman" font-size="20">z'</text>
	<ellipse stroke="black" stroke-width="1" fill="none" cx="645.5" cy="106.5" rx="30" ry="30"/>
	<text x="640.5" y="112.5" font-family="Times New Roman" font-size="20">u</text>
	<polygon stroke="black" stroke-width="1" points="130.187,97.723 206.813,74.277"/>
	<polygon fill="black" stroke-width="1" points="206.813,74.277 197.7,71.837 200.626,81.399"/>
	<polygon stroke="black" stroke-width="1" points="394.544,111.843 488.456,76.157"/>
	<polygon fill="black" stroke-width="1" points="488.456,76.157 479.202,74.324 482.754,83.672"/>
	<polygon stroke="black" stroke-width="1" points="263.009,77.469 338.991,110.531"/>
	<polygon fill="black" stroke-width="1" points="338.991,110.531 333.65,102.754 329.661,111.923"/>
	<polygon stroke="black" stroke-width="1" points="545.091,74.587 616.909,97.413"/>
	<polygon fill="black" stroke-width="1" points="616.909,97.413 610.8,90.225 607.771,99.755"/>
</svg>
We want to prove that $$d[u]=d(s,u)$$. Suppose toward a contradiction that our claim is not true and that $$u$$ has the wrong estimate. Also suppose that node $$z$$ is the last node with a correct estimate before node $$u$$ and that vertex $$z'$$ is the vertex after $$z$$ in the shortest path above. We can see that <br>
<div center>
$$ d[z] = d(s,z) \leq d(s,u) \leq d[u] $$ <br>
</div>
This is because we assumed $$z$$ has a correct estimate and we also know that $$d(s,z) \leq d(s,u)$$ because first, sub-paths of shortest paths are shortest paths (can be proved by contradiction). Second, the distance from $$z$$ to $$u$$ is non-negative because all edges have non-negative weights and therefore $$d(s,z) \leq d(s,u)$$. The last part $$d(s,u) \leq d[u]$$ follows from claim 1!
<br>
<br>
So now, we have $$d[z] \leq d[u]$$. There are two cases: <br>
Case 1: If $$d[z] = d[u]$$. In this case, since we assumed $$z$$ has a correct estimate then $$u$$ must have a correct estimate and we're done! <br>
Case 2: If $$d[z] < d[u]$$. In this case, since $$u$$ was the smallest not-sure node, then $$z$$ must be sure. Otherwise we would have picked $$z$$ as the smallest not-sure node. Since $$z$$ is sure then we must have updated $$z$$'s neighbors. In particular, we know that $$z'$$ comes after $$z$$ so,
<div center>
$$
\begin{align*}
d[z'] &\leq d[z] + w(z,z') \\
&= d(s,z) + w(z,z') \ \ \text{This is because } z \text{ is a sure node so by IH } d[z] = d(s,z) \\ 
&= d(s,z') \ \ \text{ Subpaths of shortest paths are shortest paths} \\
&\leq d[z'] \ \ \text{ By claim 1}
\end{align*}
$$
</div>
This means that $$z'$$ has a correct estimate. This is a contradiction because we assumed that $$z$$ is the last node with a good estimate and therefore, $$u$$ must have the correct estimate, as required.

<b>Conclusion:</b> 
After the last node is marked sure, we have $$d[v] = d(s,v)$$ for all $v$ in $V$, as we wanted to show. $$\blacksquare$$
<br>
<br>
<!------------------------------------------------------------------------------------>
<h4><b>Running Time</b></h4>
What are we doing in this algorithm? For each vertex in the not-sure list, we <br>
(1) find the minimum vertex. <br>
(2) remove that vertex. <br>
(3) update all neighbors with lower estimates if possible.<br>
<br>
Therefore we see that if we have $$n$$ vertices and $$m$$ edges:
<div center>
$$
\begin{align*}
TotalTime &= \sum_{u \in V} \big\{ T(findMin) + \big(\sum_{v \in u.neighbors} T(updateKey)\big) + T(removeMin) \big\} \\
&= n(T(findMin) + T(removeMin)) + m(T(updateKey))

\end{align*}
$$
</div>
Now it is clear that it really depends on how we implement the list that holds the not-sure nodes. Let's consider different data structures
- Arrays
	- findMin will run in $$O(n)$$
	- RemoveMin will run in $$O(n)$$
	- UpdateKey will run in $$O(1)$$<br>
Therefore, the total time will be $$O(n(2n) + m) = O(n^2 + m) = O(n^2)$$

- Red Black Tree
	- findMin will run in $$O(\log(n))$$
	- RemoveMin will run in $$O(\log(n))$$
	- UpdateKey will run in $$O(\log(n))$$<br>
Therefore, the total time will be $$O(n\log(n) + m\log(n)) = O((n+m)\log(n))$$. <br>
Notice here, if the graph is dense, meaning that $$m=O(n^2)$$, then this is worse than arrays! if it's sparse, then it's better.

- Fibonacci Heaps
	- findMin will run in $$O(1)$$, amortized time.
	- RemoveMin will run in $$O(\log(n))$$, amortized time. 
	- UpdateKey will run in $$O(1)$$, amortized time.<br>
Therefore, the total time will be $$O(n\log(n) + m)$$, amortized time.
<br>
<br>
<!------------------------------------------------------------------------------------>
<h4><b>Handling Negative Weights</b></h4>
TODO!!
<br>
<br>
<!------------------------------------------------------------------------------------>
<h4><b>Implementation</b></h4>
https://github.com/strncat/algorithms-and-data-structures/blob/master/graphs/shortest-paths/dijkstra/dijkstra.cpp
<br>
<br>


