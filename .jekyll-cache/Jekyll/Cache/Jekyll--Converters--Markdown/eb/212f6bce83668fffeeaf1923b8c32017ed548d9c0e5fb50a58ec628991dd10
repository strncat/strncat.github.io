I"vR<p><img src="http://localhost:4000/assets/rmq/rmq-array.png" alt="my photo" />
Given an array \(A\) and two indices \(i \leq j\) that are not known in advance. The RMQ problem solves the problem of finding the minimum element in the range \(A[i],A[i+1],...,A[j-1],A[j]\).
<br />
<br />
<!----------------------------------------------------------------------------------------></p>
<h4><b>Definitions&lt;/h3&gt;
Let $$\langle p(n), q(n)\rangle$$ be the complexity of an algorithm with preprocessing time $$p(n)$$ and query time $$q(n)$$.
<br />
<br />
<!---------------------------------------------------------------------------------------->
<h4><b>Algorithm 1: no preprocessing&lt;/h3&gt;
The simplest approach is to not do any kind of preprocessing on the input and just compute the minimum for each query. Therefore, we will have $$\langle p(n), q(n)\rangle = \langle O(1), O(n)\rangle$$.
<br />
<br />
<!---------------------------------------------------------------------------------------->
<h4><b>Algorithm 2: precompute all ranges&lt;/h3&gt;
We compute the minimum element for all possible ranges. There are $$O(n^2)$$ possible ranges. We need $O(n)$ time to compute the minimum in each range so the total time preprocessing time is $$p(n) = O(n^3)$$ and therefore, we have $$\langle p(n), q(n)\rangle = \langle O(n^3), O(1)\rangle$$.
<br />
<br />
<!---------------------------------------------------------------------------------------->
<h4><b>Algorithm 3: precompute all ranges with dynamic programming&lt;/h3&gt;
We can use dynamic programming to compute all the ranges. Given that we know the minimum $$m$$ to a range $$A[i,...j]$$, the solution to the range $$A[i,...j+1]$$ is just $$min(m, A[j+1])$$. 


<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="n">n</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span><span class="p">{...}</span>
<span class="c1">// given the minimum to range dp[i,j-1], </span>
<span class="c1">// the minimum to range [i,j+1] = min(dp[i,j-1],a[j])</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="p">}</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// for range i..j</span>
        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

Therefore, $$p(n) = O(n^2)$$ and we have $$\langle p(n), q(n)\rangle = \langle O(n^2), O(1)\rangle$$.
<br />
<br />
<!---------------------------------------------------------------------------------------->
<h4><b>Algorithm 4: block decomposition&lt;/h3&gt;
![my photo](http://localhost:4000/assets/rmq/rmq-block.png)
<i>Approach:</i><br />
We can split the input into $$O(n/b)$$ blocks of block size $$b$$ and compute the minumum in each block.<br />

<i>Preprocessing Time:</i><br />
We need to find the minimum for each block. Time to find the minimum for all blocks is $$p(n) = n/b*b = O(n)$$. <br />

<i>Query Time:</i><br />
Given indices $$i$$ and $$j$$.<br />
(1) We find the minimum for the internal blocks between $$i$$ and $$j$$ in time $$O(n/b)$$.<br />
(2) We need to look at possibly all the elements in the two outer blocks. This can be done in time $$O(2b)=O(b)$$.<br />

Therefore, $$q(n) = O(b + (n/b))$$: 

<i>What is the optimal block size?</i><br />
We can take the derivative of $$b + n/b$$ to find the value that minimizes $$b$$. This value is $$b = \sqrt{n}$$. Therefore, the query time is $$q(n) = O(b + (n/b)) = O(\sqrt{n} + (n/\sqrt{n})) = O(\sqrt{n})$$.
<br />
<br />
Finally we will have $$\langle p(n), q(n)\rangle = \langle O(n), O(\sqrt{n})\rangle$$.


<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="c1">// given that we computed each block's minimum</span>
<span class="c1">// given indices i and j, we can do something like this</span>
<span class="kt">int</span> <span class="n">block_i</span> <span class="o">=</span> <span class="n">i</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">block_j</span> <span class="o">=</span> <span class="n">j</span><span class="o">/</span><span class="n">b</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">;</span>

<span class="c1">// search internal blocks</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">block_i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">block_j</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">min</span> <span class="o">&gt;</span> <span class="n">block</span><span class="p">[</span><span class="n">k</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">min</span> <span class="o">=</span> <span class="n">block</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// search elements in the outer blocks</span>
<span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">block_i</span><span class="o">*</span><span class="n">b</span><span class="p">);</span>
<span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">block_i</span><span class="o">*</span><span class="n">b</span><span class="o">+</span><span class="n">b</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">min</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">min</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">k</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">block_j</span><span class="o">*</span><span class="n">b</span><span class="p">);</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">block_j</span><span class="o">*</span><span class="n">b</span><span class="o">+</span><span class="n">b</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">min</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">min</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"%d  "</span><span class="p">,</span> <span class="n">min</span><span class="p">);</span></code></pre></figure>

<br />
<!---------------------------------------------------------------------------------------->
<h4><b>Algorithm 5: sparse tables&lt;/h3&gt;
![my photo](http://localhost:4000/assets/rmq/rmq-sparse-main.png)

Going back to the dynamic programmnig solution. Instead of computing all ranges, we can instead compute a specific set of ranges. How? For each index, we compute the minimum for the ranges
<br />
<div center=""> 
$$
\begin{align*}
\{i,i+2^0\}, \{i,i+2^1\}, \{i,i+2^2\}, ..., \{i,i+2^k\}
\end{align*}
$$
</div>
So for the array above we will have the following minimums: 
<br />

![my photo](http://localhost:4000/assets/rmq/rmq-sparse.png)

Each Entry, $$M[i,j]$$ represents the minimum for the range $$\{i,i+2^j\}$$. Since we're computing $$n\log(n)$$ ranges, therefore, this table has size $$O(nlogn)$$. We can further use dynamic programmnig to fill this table out. 
<br />
<br />
<i>Dyanmic Programming</i>
<br />
Notice that any region can be divided into two regions. The intuition is that since we're computing the minimum for ranges that are powers of 2, then any region of size $$2^k$$ can be divided into two regions of size $$2^{k-1}$$ which we compute first. In the example below, we want to find the minimum for the gray range that starts at $$i$$ and of size $$2^j$$. To do so, we divide the range into the blue and yellow regions, each of size $$2^{j-1}$$. The blue region is just $$M[i,j-1]$$ and the yellow region is just $$M[i+2^{j-1},j-1]$$
<br />
![my photo](http://localhost:4000/assets/rmq/rmq-sparse-range.png)
<br />
Therefore, the recursive formula to compute $$M[i,j]$$ is:
<div center="">
$$
 M[i,j] = \left\{\begin{array}{@{}lr@{}}
        M[i,j-1] &amp; \text{if }M[i,j-1] \leq M[i+2^{j-1},j-1]\\
        M[i+2^{j-1}, j-1]                       &amp; \text{otherwise} 
        \end{array}\right\}
$$
</div>

We can use something similar to this to compute the values based on the recurrence above

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">preprocess_sparse</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">M</span><span class="p">[</span><span class="n">MAX</span><span class="p">][</span><span class="n">LOGMAX</span><span class="p">])</span> <span class="p">{</span> <span class="c1">// O(nlog(n))</span>
    <span class="c1">// 2^0</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">M</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">lg</span> <span class="o">=</span> <span class="n">log2</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

    <span class="c1">// for each power of 2</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">lg</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// fill each row</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">M</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">M</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">M</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">))][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<br />

<i>Preprocessing Time:</i><br />
Notice that for each index, we're computing $$\log{n}$$ ranges. Therefore, the total preprocessing time $$p(n) = O(n\log(n))$$.
<br />
<br />
<i>Query Time:</i><br />
![my photo](http://localhost:4000/assets/rmq/rmq-sparse-query.png)
<br />
Given indices $$i$$ and $$j$$:<br />
(1) We know the number of elements in the range $$\{i,j\}$$ is $$j-i+1$$. We can then find the largest block of size $$2^k$$ that fits in that range. We can simply take the log of $$j - i + 1$$ to get $$k$$. This is done in $$O(1)$$ time. <br />
<br />
(2) We can now divide the range into two possibly overlapping regions, $$\{i, i+2^k-1\}$$ which is $$M[i][k]$$ and $$\{j-2^k+1, j\}$$ which is $$M[j-2^k+1][k]$$. We can return the minimum of the two ranges. The total time is therefore $$O(1)$$.
<br />
This code just tests all possible ranges:

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">void</span> <span class="nf">test_sparse</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">M</span><span class="p">[</span><span class="n">MAX</span><span class="p">][</span><span class="n">LOGMAX</span><span class="p">];</span>
    <span class="n">preprocess_sparse</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">M</span><span class="p">);</span>

    <span class="c1">// query time</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// given indices i and j</span>
            <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">log2</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\t</span><span class="s">"</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="n">M</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">],</span> <span class="n">M</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">k</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">k</span><span class="p">]));</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<br />
Finally we will have $$\langle p(n), q(n)\rangle = \langle O(n\log(n)), O(1)\rangle$$.
<br />
<br />
<!---------------------------------------------------------------------------------------->
<h4><b>Implementation&lt;/h3&gt;
https://github.com/strncat/algorithms-and-data-structures/blob/master/rmq/rmq.cpp
<br />
<br />
<!---------------------------------------------------------------------------------------->
<h4><b>References&lt;/h3&gt;
1. CS166 Lecture Slides http://web.stanford.edu/class/cs166/lectures/00/Small00.pdf
2. Fischer, Johannes and Heun, Volker. Theoretical and Practical Improvements on the RMQ-Problem, with Applications to LCA and LCE
<br />
<br />



</b></h4></b></h4></b></h4></b></h4></b></h4></b></h4></b></h4></b></h4>
:ET