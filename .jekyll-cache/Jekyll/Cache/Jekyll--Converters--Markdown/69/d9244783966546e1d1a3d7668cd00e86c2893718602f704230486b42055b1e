I"π&<p>The definition that made most sense was from <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaDesignPatterns/CocoaDesignPatterns.html">developer.apple.com</a>. ‚ÄúDelegation is a mechanism by which a host object embeds a weak reference to another object (its delegate) and periodically sends messages to the delegate when it requires its input for a task.‚Äù 
<br />
<br />
For example, <i>NSWindow</i> has a weak reference to its delegate object, <i>delegate</i>, which conforms to the protocol <i>NSWindowDelegate</i>. <i>NSWindowDelegate</i> defines a set of optional methods that the delegate can implement to respond to various messages sent by the window object. Since the methods are optional, <i>NSWindow</i> will check if its delegate implemented them by calling respondToSelector. 
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Motivation&lt;/h3&gt;
Why delegation? why can't we use inheritance instead? Delegation reduces coupling between classes. There is no need for our object to subclass <i>NSWindow</i> in order to define additional behavior. We just become a delegate of <i>NSWindow</i> to receive all the critical messages we're interested in and then define our own custom behaviors on top of it.
<br />
<br />
<!------------------------------------------------------------------------------------>
<h4><b>Example&lt;/h3&gt;
This is an extremely simple example to see how delegation might work. Suppose we have a view with a simple button. When the button is pressed, we move to another view. In the first view controller we have the following:

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">class</span> <span class="nc">ViewController</span><span class="o">:</span> <span class="n">UIViewController</span><span class="p">,</span> <span class="n">SubViewControllerDelegate</span> <span class="p">{</span>
    <span class="k">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
        <span class="n">let</span> <span class="n">button</span> <span class="o">=</span> <span class="n">UIButton</span><span class="p">(</span><span class="n">frame</span><span class="o">:</span> <span class="n">CGRect</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="n">width</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="n">height</span><span class="o">:</span> <span class="mi">50</span><span class="p">))</span>
        <span class="n">button</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">.</span><span class="n">green</span>
        <span class="n">button</span><span class="p">.</span><span class="n">setTitle</span><span class="p">(</span><span class="s">"Press"</span><span class="p">,</span> <span class="k">for</span><span class="o">:</span> <span class="p">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">button</span><span class="p">.</span><span class="n">addTarget</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">action</span><span class="o">:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">pressed</span><span class="p">),</span> <span class="k">for</span><span class="o">:</span> <span class="p">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">button</span><span class="p">)</span>
    <span class="p">}</span>
	<span class="err">@</span><span class="n">objc</span> <span class="n">func</span> <span class="nf">pressed</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// when the button is pressed, move to AnotherViewController</span>
        <span class="n">let</span> <span class="n">host</span> <span class="o">=</span> <span class="n">HostViewController</span><span class="p">()</span>
        <span class="n">host</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span> <span class="c1">// we are the delegate of host</span>
        <span class="n">self</span><span class="p">.</span><span class="n">present</span><span class="p">(</span><span class="n">sub</span><span class="p">,</span> <span class="n">animated</span><span class="o">:</span> <span class="nb">true</span><span class="p">,</span> <span class="n">completion</span><span class="o">:</span> <span class="n">nil</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>


In the second view controller (host), we have a button. When we press the button, we want to let the first view controller know that it's been pressed. To do so, we create a weak delegate reference that lives with us, the host controller. This delegate must conform to a protocol that we design. <i>someMessage</i> is the way we want to communicate with the delegate. 


<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">public</span> <span class="n">protocol</span> <span class="n">HostViewControllerDelegate</span><span class="o">:</span> <span class="k">class</span> <span class="p">{</span>
    <span class="n">func</span> <span class="n">someMessage</span><span class="p">(</span><span class="n">_</span> <span class="n">message</span><span class="o">:</span> <span class="n">String</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>


The delegate will implement <i>someMessage</i>. The host will then call <i>someMessage</i> on the delegate to pass it a message that says "hey, the button has been pressed!!".


<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="k">class</span> <span class="nc">HostViewController</span><span class="o">:</span> <span class="n">UIViewController</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">weak</span> <span class="n">var</span> <span class="n">delegate</span><span class="o">:</span> <span class="n">HostViewControllerDelegate</span><span class="o">?</span> <span class="c1">// our delegate</span>

    <span class="k">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">let</span> <span class="n">button</span> <span class="o">=</span> <span class="n">UIButton</span><span class="p">(</span><span class="n">frame</span><span class="o">:</span> <span class="n">CGRect</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="n">y</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="n">width</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span> <span class="n">height</span><span class="o">:</span> <span class="mi">50</span><span class="p">))</span>
        <span class="n">button</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">.</span><span class="n">red</span>
        <span class="n">button</span><span class="p">.</span><span class="n">setTitle</span><span class="p">(</span><span class="s">"World"</span><span class="p">,</span> <span class="k">for</span><span class="o">:</span> <span class="p">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">button</span><span class="p">.</span><span class="n">addTarget</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">action</span><span class="o">:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">pressed</span><span class="p">),</span> <span class="k">for</span><span class="o">:</span> <span class="p">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">button</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="err">@</span><span class="n">objc</span> <span class="n">func</span> <span class="nf">pressed</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">delegate</span><span class="o">?</span><span class="p">.</span><span class="n">someMessage</span><span class="p">(</span><span class="s">"hey, the button has been pressed!!"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>


<br />
<!------------------------------------------------------------------------------------>
<h4><b>References&lt;/h3&gt;
- <a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612">Design Patterns</a>
- <a href="https://www.amazon.com/Cocoa-Design-Patterns-Erik-Buck/dp/0321535022">Cocoa Design Patterns (Book)</a>
- <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaDesignPatterns/CocoaDesignPatterns.html">Cocoa Design Patterns (Apple Docs)</a>
<br />
<br />















</b></h4></b></h4></b></h4>
:ET