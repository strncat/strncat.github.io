I"7<p>Per the problem description, a palindromic number reads the same both ways. The largest palindrome made from the product of two \(2\)-digit numbers is \(9009 = 91 \times 99\). The goal of this problem is to find the largest palindrome made from the product of two \(3\)-digit numbers.
<br />
<br />
<!------------------------------------------------------------------------------------></p>
<h4><b>Solution&lt;/h3&gt;
To check that a given number $$n$$ is a palindrome, we will reverse the number and check if the $$n$$ is equal to its reverse.

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="nf">isPalindrome</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">reminder</span><span class="p">,</span> <span class="n">reverse</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">number</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">reminder</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
        <span class="n">reverse</span> <span class="o">=</span> <span class="n">reverse</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">reminder</span><span class="p">;</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">reverse</span> <span class="o">==</span> <span class="n">number</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<br />
To find the largest product of $$3$$ digit numbers, we will use a double loop starting from $$999$$ and going down. At any point, if we find a palindrome that is smaller than the current largest one, we will exit. 

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">int</span> <span class="nf">largestPalindrome</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">palindrome</span><span class="p">,</span> <span class="n">largestPalindrome</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">999</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">largestPalindrome</span><span class="p">)</span> <span class="p">{</span> <span class="k">break</span><span class="p">;</span> <span class="p">}</span>
            <span class="n">palindrome</span> <span class="o">=</span> <span class="n">isPalindrome</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">j</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">palindrome</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">*</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="n">largestPalindrome</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">*</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">largestPalindrome</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">j</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">largestPalindrome</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

Calling this to find the largest palindrome is then trivial.

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">largestPalindrome</span><span class="p">(</span><span class="mi">999999</span><span class="p">));</span></code></pre></figure>

<br />
<br />
<!------------------------------------------------------------------------------------>
The entire code is <a href="https://github.com/strncat/project-euler/blob/main/0004-largest-palindrome-product.cpp">here</a>.
<br />
<br />
<!------------------------------------------------------------------------------------>
<h4><b>References&lt;/h3&gt;
<a href="https://projecteuler.net/problem=3">Project Euler - 03</a>
<br />
<br />


</b></h4></b></h4>
:ET