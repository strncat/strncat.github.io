---
layout: post
title:  "Prim's Minimum Spanning Tree"
date:   2019-04-02 12:01:36 -0700
categories: jekyll update
mathjax: true
---

<b>1 Introduction</b><br>
Let $$G=(V,E)$$ be a graph with $$V$$ vertices and $$E$$ edges. 

<br>
<!------------------------------------------------------------------------------------>
<hr>
<br>
<b>2 Algorithm</b><br>
{% highlight c++ %}

{% endhighlight %}
<br>
<!------------------------------------------------------------------------------------>
<hr>
<br>
<b>3 Example</b><br>


<br>
<!------------------------------------------------------------------------------------>
<hr>
<br>
<b>4 Proof of Correctness</b><br>
Why does this algorithm find a minimum spanning tree? 
<br>
<br>

| Lemma 1: The SCC graph is a DAG |

<i>Proof:</i> Suppose that the SCC graph is not a DAG and let $$A$$ and $$B$$ be two components where there is an edge from $$A$$ to $$B$$ and an edge from $$B$$ to $$A$$. Let $$u$$ be a vertex in $$A$$ and let $$v$$ be a vertex in $$B$$. By the connected component definition, we know there is a path between $$v$$ and every vertex in $$A$$. Similarly, there is a path between $$u$$ and any vertex in $$B$$. Since there is an edge from $$A$$ to $$B$$ then there is a path from $$v$$ to any vertex in $$B$$ and Similarly, there is a path between $$u$$ and any vertex in $$A$$. Therefore, the vertices in $$A$$ and $$B$$ must be in the same strongly connected component. This is a contradiction, since we assumed $$A$$ and $$B$$ two strongly connected components. Therefore, the SCC graph must be a DAG. $$\blacksquare$$
<br>
<br>



| Theorem: The algorithm we saw before will correctly identify strongly connected components |

<i>Proof:</i> <br>
<b>Inductive Hypothesis: </b>
<br>

<b>Base Case:</b> 
<br>

<b>Inductive Step:</b> 
<br>
<br>


<b>Conclusion:</b> 
<br>
<!------------------------------------------------------------------------------------>
<hr>
<br>
<b>5 Running Time:</b> 

<br>
<!------------------------------------------------------------------------------------>
<hr>
<br>
<b>6 Detailed Implementation:</b> 
https://github.com/strncat/algorithms-and-data-structures/tree/master/graphs/minimum-spanning-trees/prim


<br>
<!------------------------------------------------------------------------------------>
<hr>
<br>
References: These notes are based on the awesome lecture notes from http://web.stanford.edu/class/cs161/schedule.html



